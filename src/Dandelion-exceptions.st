Error subclass: #DlCannotDelete	instanceVariableNames: 'target'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-exceptions'!!DlCannotDelete methodsFor: 'accessing' stamp: 'mu 11/25/2004 01:23'!target	^target! !!DlCannotDelete methodsFor: 'accessing' stamp: 'mu 11/25/2004 01:23'!target: anObject	target := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlCannotDelete class	instanceVariableNames: ''!!DlCannotDelete class methodsFor: 'instance creation' stamp: 'mu 11/25/2004 01:23'!target: anObject	^self new target: anObject! !Error subclass: #DlNoSuchEvent	instanceVariableNames: 'eventSymbol'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-exceptions'!!DlNoSuchEvent commentStamp: '<historical>' prior: 0!I am raised when event registration ( or unregistration) is failed.#creator [:masashi | ^umezawa] #version 0.1!!DlNoSuchEvent methodsFor: 'accessing' stamp: 'M.U 1/16/2000 01:28'!eventSymbol	^eventSymbol! !!DlNoSuchEvent methodsFor: 'accessing' stamp: 'M.U 1/16/2000 01:28'!eventSymbol: aValue	eventSymbol := aValue! !Notification subclass: #DlNotification	instanceVariableNames: 'orginalException'	classVariableNames: 'IsDebugMode'	poolDictionaries: ''	category: 'Dandelion-exceptions'!!DlNotification commentStamp: '<historical>' prior: 0!I am an abstract Notification class for Dandelion.In debug mode, I will report Transcript when no one handles me.#creator [:masashi | ^umezawa] #version 0.1!!DlNotification methodsFor: 'accessing' stamp: 'MU 3/13/2000 02:14'!orginalException	^orginalException! !!DlNotification methodsFor: 'accessing' stamp: 'MU 3/13/2000 02:15'!orginalException: aValue	orginalException := aValue! !!DlNotification methodsFor: 'testing' stamp: 'MU 3/13/2000 02:16'!isDebugMode	^self class isDebugMode! !!DlNotification methodsFor: 'private' stamp: 'MU 3/13/2000 02:25'!reportTranscript	"Copyright(C) 2000 Masashi Umezawa All Rights Reserved"	self isDebugMode		ifTrue:			[Transcript cr; show: '!!!! notification !!!!'.			Transcript space; show: self description printString].			! !!DlNotification methodsFor: 'exceptionDescription' stamp: 'MU 3/13/2000 03:06'!defaultAction	self isDebugMode		ifTrue: ["Debugger				openContext: initialContext				label: self description				contents: initialContext shortStack."				self reportTranscript].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlNotification class	instanceVariableNames: ''!!DlNotification class methodsFor: 'class initialization' stamp: 'MU 3/13/2000 02:13'!initialize	"DlNotification initialize"	IsDebugMode := true! !!DlNotification class methodsFor: 'accessing' stamp: 'MU 3/13/2000 02:12'!isDebugMode	^IsDebugMode! !!DlNotification class methodsFor: 'accessing' stamp: 'MU 3/13/2000 02:12'!isDebugMode: aBoolean	IsDebugMode := aBoolean! !DlNotification subclass: #DlEventHandlingFailed	instanceVariableNames: 'failedListener'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-exceptions'!!DlEventHandlingFailed commentStamp: '<historical>' prior: 0!I am raised when event sink cannot handle event properly.#creator [:masashi | ^umezawa] #version 0.1!!DlEventHandlingFailed methodsFor: 'accessing' stamp: 'MU 3/11/2000 18:31'!failedListener	^failedListener! !!DlEventHandlingFailed methodsFor: 'accessing' stamp: 'MU 3/11/2000 18:31'!failedListener: aValue	failedListener := aValue! !DlNotification subclass: #DlInstanceCreationFailed	instanceVariableNames: 'target'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-exceptions'!!DlInstanceCreationFailed commentStamp: '<historical>' prior: 0!I am raised when instance creation is failed.#creator [:masashi | ^umezawa] #version 0.1!!DlInstanceCreationFailed methodsFor: 'accessing' stamp: 'MU 3/13/2000 02:20'!target	^target! !!DlInstanceCreationFailed methodsFor: 'accessing' stamp: 'MU 3/13/2000 02:20'!target: aValue	target := aValue! !DlNotification initialize!