DlProperties subclass: #DlXmiUmlOutputProperties	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-outputter-xmi-uml'!!DlXmiUmlOutputProperties methodsFor: 'type properties' stamp: 'MU 4/5/2002 16:59'!primitiveTypes	^self at: #primitiveTypes ifAbsentPutValue: self class primitiveTypes! !!DlXmiUmlOutputProperties methodsFor: 'type properties' stamp: 'mu 11/19/2004 01:20'!taggedValueTypes	^self at: #taggedValueTypes ifAbsentPutValue: self class taggedValueTypes! !!DlXmiUmlOutputProperties methodsFor: 'file properties' stamp: 'MU 3/19/2002 16:19'!filename	^self at: #filename ifAbsentPutValue: 'reversed'! !!DlXmiUmlOutputProperties methodsFor: 'file properties' stamp: 'MU 3/19/2002 16:19'!suffix	^self at: #suffix ifAbsentPutValue: '.xmi'! !!DlXmiUmlOutputProperties methodsFor: 'file properties' stamp: 'MU 4/12/2002 11:16'!xmlDeclaration	^self at: #xmlDeclaration ifAbsentPutValue: (DlXmlUtil xmlDeclaration)! !!DlXmiUmlOutputProperties methodsFor: 'other properties' stamp: 'MU 4/12/2002 13:20'!changesName	^self at: #changeName ifAbsentPutValue:  'changes'! !!DlXmiUmlOutputProperties methodsFor: 'other properties' stamp: 'MU 3/26/2002 19:14'!commentAsDocument	^self at: #commentAsDocument ifAbsentPutValue: false! !!DlXmiUmlOutputProperties methodsFor: 'other properties' stamp: 'MU 4/11/2002 15:06'!primitiveTypesName	^self at: #primitiveTypesName ifAbsentPutValue:  'Primitives'! !!DlXmiUmlOutputProperties methodsFor: 'other properties' stamp: 'MU 4/12/2002 11:47'!removedName	^self at: #removedName ifAbsentPutValue:  'Removed'! !!DlXmiUmlOutputProperties methodsFor: 'other properties' stamp: 'MU 4/10/2002 11:01'!roleAsAssociationName	^self at: #roleAsAssociationName ifAbsentPutValue: false! !!DlXmiUmlOutputProperties methodsFor: 'other properties' stamp: 'MU 3/19/2002 17:16'!unresolvedName	^self at: #unresolvedName ifAbsentPutValue:  'Unresolved'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlXmiUmlOutputProperties class	instanceVariableNames: 'primitiveTypes taggedValueTypes'!!DlXmiUmlOutputProperties class methodsFor: 'accessing' stamp: 'MU 3/19/2002 16:17'!primitiveTypes	primitiveTypes isNil ifTrue:[primitiveTypes := self defaultPrimitiveTypes].	^primitiveTypes! !!DlXmiUmlOutputProperties class methodsFor: 'accessing' stamp: 'MU 3/19/2002 16:17'!primitiveTypes: anArray	primitiveTypes := anArray! !!DlXmiUmlOutputProperties class methodsFor: 'accessing' stamp: 'mu 11/19/2004 01:19'!taggedValueTypes	taggedValueTypes isNil ifTrue:[taggedValueTypes := self defaultTaggedValueTypes].	^taggedValueTypes! !!DlXmiUmlOutputProperties class methodsFor: 'accessing' stamp: 'mu 11/19/2004 01:19'!taggedValueTypes: anArray	taggedValueTypes := anArray! !!DlXmiUmlOutputProperties class methodsFor: 'factory' stamp: 'MU 3/19/2002 16:17'!defaultPrimitiveTypes	^#(		#True #False #UndefinedObject 		#Date #Time		#Float #Fraction #Integer #LargeNegativeInteger #LargePositiveInteger #Number #Random #SmallInteger		#ArrayedCollection #Collection #SequenceableCollection		#Bag #Dictionary #IdentityDictionary #IdentitySet #PluggableDictionary #PluggableSet #Set		#Heap #Interval #LinkedList #MappedCollection #OrderedCollection #SharedQueue #SortedCollection		#Character #CharacterSet #String #Symbol #Text		#Array #Array2D #ByteArray #FloatArray #IntegerArray #RunArray #WordArray		#ReadStream #ReadWriteStream #Stream #WriteStream		#WeakArray #WeakKeyDictionary #WeakRegistry #WeakValueDictionary		#Association #Link #LookupKey #WeakKeyAssociation #WeakValueAssociation		#Point #Quadrangle #Rectangle		#Color	)! !!DlXmiUmlOutputProperties class methodsFor: 'factory' stamp: 'mu 11/23/2004 00:49'!defaultTaggedValueTypes	^#(		'documentation' 'protocol'	)! !DlConvertibleOutputter subclass: #DlXmiUmlOutputter	instanceVariableNames: 'root model packagesDict classesDict unresolvedPackage unresolvedClassesDict primitiveTypesPackage predefinedPrimitiveTypesDict'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-outputter-xmi-uml'!!DlXmiUmlOutputter methodsFor: 'initialize-release' stamp: 'mu 11/19/2004 01:30'!initElements	root := DlUmlRootElement new.	model := root addModelNamed: (self filename).! !!DlXmiUmlOutputter methodsFor: 'initialize-release' stamp: 'mu 11/22/2004 23:50'!initPredefinedTypes	self initPrimitiveTypes.	self initTaggedValueTypes! !!DlXmiUmlOutputter methodsFor: 'initialize-release' stamp: 'mu 11/19/2004 01:33'!initPrimitiveTypes	self preparePredefinedPrimitiveTypesDict.	self classesDict		keysDo: [:each | self predefinedPrimitiveTypesDict				removeKey: each name asString				ifAbsent: []]. 	self predefinedPrimitiveTypesDict		valuesDo: [:each | self primitiveTypesPackage add: each]! !!DlXmiUmlOutputter methodsFor: 'initialize-release' stamp: 'mu 11/23/2004 00:52'!initTaggedValueTypes	| taggedValueRoot |	DlFeTagDefinition initDefaultDefinitionsByNames: 		(self properties taggedValueTypes asOrderedCollection add: self properties changesName;			 yourself).	taggedValueRoot := self model.	DlFeTagDefinition definitions		do: [:each | taggedValueRoot add: each]! !!DlXmiUmlOutputter methodsFor: 'actions-output' stamp: 'mu 11/19/2004 01:31'!outputClassCategories	| props suffix fileName |	props := self properties.	suffix := props suffix.	fileName := self filename.	self prepareElementCache.	self initElements.	self initPredefinedTypes.		[self outStreamNamed: fileName , self timestampString , suffix.	self outStream	nextPutAll: (self properties xmlDeclaration).	self outStream cr.	self writeElements]		ensure: [self closeStream].		self clearAll.! !!DlXmiUmlOutputter methodsFor: 'actions-writing' stamp: 'mu 11/13/2004 02:32'!writeElements	self toBeWrittenElements		do: [:each | self model add: each].	self root printXmlOn: self outStream! !!DlXmiUmlOutputter methodsFor: 'factory-xmi-uml' stamp: 'MU 4/8/2002 17:08'!classOn: aDlAnalyzableClass 	| fcCls |	fcCls := self classesDict at: aDlAnalyzableClass ifAbsentPut: [self unresolvedPackage add: (DlFcClass name: aDlAnalyzableClass name)].	(aDlAnalyzableClass isResolved)		ifTrue: [self setClass: fcCls by: aDlAnalyzableClass].	^ fcCls! !!DlXmiUmlOutputter methodsFor: 'factory-xmi-uml' stamp: 'MU 4/8/2002 17:28'!generalizationOn: aDlAnalyzableClass 	| dlSuperclass fcCls fcSuperclass fcGen |	dlSuperclass := aDlAnalyzableClass superclass.	dlSuperclass isNil		ifTrue: [^ nil].	fcCls := self classesDict at: aDlAnalyzableClass.	fcSuperclass := (self classesDict includesKey: dlSuperclass)				ifTrue: [self classesDict at: dlSuperclass]				ifFalse: [(self unresolvedClassesDict includesKey: dlSuperclass)						ifTrue: [self unresolvedClassesDict at: dlSuperclass]						ifFalse: [| newUnresolvedFcClass | 							newUnresolvedFcClass := DlFcClass name: aDlAnalyzableClass superclass name.							self unresolvedPackage add: newUnresolvedFcClass.							self unresolvedClassesDict at: dlSuperclass put: newUnresolvedFcClass]].	fcGen := DlFcGeneralization parent: fcSuperclass child: fcCls.	^ fcGen! !!DlXmiUmlOutputter methodsFor: 'factory-xmi-uml' stamp: 'MU 4/8/2002 16:37'!packageOn: aDlAnalyzableClassCategory 	| package |	package := self packagesDict at: aDlAnalyzableClassCategory.	aDlAnalyzableClassCategory classes		do: [:each | 			package				add: (self classOn: each).			package				add: (self generalizationOn: each).			(each tagAt: #unidirectionalAssociations) isNil				ifFalse: [package						addAll: (each tagAt: #unidirectionalAssociations)]].	^ package! !!DlXmiUmlOutputter methodsFor: 'factory-private' stamp: 'MU 4/10/2002 12:22'!addAttributesTo: anXmiUmllClass using: aDlAnalyzableClass 	| cls |	cls := anXmiUmllClass.	aDlAnalyzableClass instVariables		do: [:each | (each hasType					and: [(self typeIsPrimitive: each type) not])				ifTrue: [self tagUnidirectionalAssociationTo: each klass by: each]				ifFalse: [| umlAtt | 					umlAtt := cls addInstVarNamed: each name.					self setAttribute: umlAtt by: each]].	aDlAnalyzableClass classVariables		do: [:each | 			| umlAtt | 			umlAtt := cls addClassVarNamed: each name.			self setAttribute: umlAtt by: each].	aDlAnalyzableClass classInstVariables		do: [:each | 			| umlAtt | 			umlAtt := cls addClassInstVarNamed: each name.			self setAttribute: umlAtt by: each]! !!DlXmiUmlOutputter methodsFor: 'factory-private' stamp: 'MU 4/5/2002 10:23'!addOperationsTo: anXmiUmlClass using: aDlAnalyzableClass 	| cls |	cls := anXmiUmlClass.	aDlAnalyzableClass instMethods		do: [:method | 			| umlOp | 			umlOp := cls addInstMethodNamed: method name.			self setOperation: umlOp by: method].	aDlAnalyzableClass classMethods		do: [:method | 			| umlOp | 			umlOp := cls addClassMethodNamed: method name.			self setOperation: umlOp by: method]! !!DlXmiUmlOutputter methodsFor: 'factory-private' stamp: 'MU 4/10/2002 11:06'!tagUnidirectionalAssociationTo: aDlAnalyzableClass by: aDlAnalyzableLocalScopeVariable 	| targetCls toFcClass assoc fromFcClass assocs |	assocs := aDlAnalyzableClass tagAt: #unidirectionalAssociations put: OrderedCollection new.	targetCls := self findAnalyzableClassTyped: aDlAnalyzableLocalScopeVariable type.	targetCls isNil		ifFalse: [| assocName roleName | 			toFcClass := self classesDict at: targetCls.			assocName := self properties roleAsAssociationName						ifTrue: [aDlAnalyzableLocalScopeVariable name]						ifFalse: [''].			assoc := DlFcAssociation name: assocName.			fromFcClass := self classesDict at: aDlAnalyzableLocalScopeVariable klass.			roleName := self properties roleAsAssociationName						ifTrue: ['']						ifFalse: [aDlAnalyzableLocalScopeVariable name].			assoc				from: fromFcClass				role: ''				to: toFcClass				role: roleName.			^ assocs add: assoc]! !!DlXmiUmlOutputter methodsFor: 'cache mgmt' stamp: 'mu 11/19/2004 01:26'!clearAll	root := model := packagesDict := classesDict := unresolvedPackage := unresolvedClassesDict := primitiveTypesPackage := predefinedPrimitiveTypesDict := nil! !!DlXmiUmlOutputter methodsFor: 'cache mgmt' stamp: 'MU 4/11/2002 15:16'!prepareElementCache	self clearAll.	self analysisStorage getAllClassCategories do: 		[:eachCat | 		| mmPkg | 		mmPkg := DlMmPackage name: eachCat name.		self packagesDict at: eachCat put: mmPkg.		eachCat classes do: 			[:eachCls | 			| fcCls | 			fcCls := DlFcClass name: eachCls name.			self classesDict at: eachCls put: fcCls]].! !!DlXmiUmlOutputter methodsFor: 'cache mgmt' stamp: 'mu 11/19/2004 01:25'!preparePredefinedPrimitiveTypesDict	self properties primitiveTypes		do: [:each | self predefinedPrimitiveTypesDict				at: each asString				put: (DlFcDataType name: each)].	! !!DlXmiUmlOutputter methodsFor: 'accessing' stamp: 'MU 3/19/2002 16:16'!classesDict	classesDict isNil ifTrue:[ classesDict := Dictionary new].	^classesDict! !!DlXmiUmlOutputter methodsFor: 'accessing' stamp: 'MU 3/19/2002 16:16'!classesDict: aDictionary	classesDict := aDictionary! !!DlXmiUmlOutputter methodsFor: 'accessing' stamp: 'MU 3/19/2002 16:43'!model	^model! !!DlXmiUmlOutputter methodsFor: 'accessing' stamp: 'MU 3/19/2002 17:29'!packagesDict	packagesDict isNil ifTrue:[ packagesDict := Dictionary new].	^packagesDict! !!DlXmiUmlOutputter methodsFor: 'accessing' stamp: 'MU 3/19/2002 17:29'!packagesDict: aDictionary	packagesDict := aDictionary! !!DlXmiUmlOutputter methodsFor: 'accessing' stamp: 'mu 11/19/2004 01:26'!predefinedPrimitiveTypesDict	predefinedPrimitiveTypesDict isNil ifTrue:[ predefinedPrimitiveTypesDict := Dictionary new].	^predefinedPrimitiveTypesDict! !!DlXmiUmlOutputter methodsFor: 'accessing' stamp: 'MU 4/11/2002 15:19'!primitiveTypesPackage	primitiveTypesPackage isNil ifTrue:[primitiveTypesPackage := DlMmPackage name: self properties primitiveTypesName].	^primitiveTypesPackage! !!DlXmiUmlOutputter methodsFor: 'accessing' stamp: 'MU 3/19/2002 16:43'!root	^root! !!DlXmiUmlOutputter methodsFor: 'accessing' stamp: 'MU 4/8/2002 17:14'!unresolvedClassesDict	unresolvedClassesDict isNil ifTrue:[ unresolvedClassesDict := Dictionary new].	^unresolvedClassesDict! !!DlXmiUmlOutputter methodsFor: 'accessing' stamp: 'MU 3/19/2002 17:17'!unresolvedPackage	unresolvedPackage isNil		ifTrue: [unresolvedPackage := DlMmPackage name: self properties unresolvedName].	^ unresolvedPackage! !!DlXmiUmlOutputter methodsFor: 'private' stamp: 'MU 3/19/2002 16:24'!filename	^self properties filename.! !!DlXmiUmlOutputter methodsFor: 'private' stamp: 'MU 3/19/2002 16:16'!findAnalyzableClassTyped: aTypeName	^self analysisStorage getAllClasses detect:[:each | each name = aTypeName] ifNone:[]	! !!DlXmiUmlOutputter methodsFor: 'private' stamp: 'mu 11/19/2004 01:25'!setAttribute: anUmlXmiAttribute by: aDlAnalyzableLocalScopeVariable 	| umlAtt dlVar |	umlAtt := anUmlXmiAttribute.	dlVar := aDlAnalyzableLocalScopeVariable.	dlVar hasType		ifTrue: [| fcClassOrDatatype | 			fcClassOrDatatype := self classesDict at: (self findAnalyzableClassTyped: dlVar type) ifAbsent:[].			fcClassOrDatatype isNil				ifTrue: [ fcClassOrDatatype := self predefinedPrimitiveTypesDict								at: dlVar type								ifAbsent: []].			fcClassOrDatatype notNil				ifTrue: [umlAtt type: fcClassOrDatatype]].	dlVar initialValue isNil		ifFalse: [umlAtt initialValue: dlVar initialValue]! !!DlXmiUmlOutputter methodsFor: 'private' stamp: 'MU 4/10/2002 12:12'!setClass: anUmlXmiClass by: aDlAnalyzableClass 	| umlClass |	umlClass := anUmlXmiClass.	self properties commentAsDocument		ifTrue: [umlClass documentation: aDlAnalyzableClass comment]		ifFalse: [umlClass comment: aDlAnalyzableClass comment].	self addAttributesTo: umlClass using: aDlAnalyzableClass.	self addOperationsTo: umlClass using: aDlAnalyzableClass.	^ umlClass! !!DlXmiUmlOutputter methodsFor: 'private' stamp: 'MU 4/5/2002 11:28'!setOperation: anUmlXmiOperation by: aDlAnalyzableMethod 	"aDlAnalyzableMethod minorKey isNil ifFalse: [anUmlXmiOperation 	stereotype: aDlAnalyzableMethod minorKey]. "	aDlAnalyzableMethod arguments		do: [:each | anUmlXmiOperation				addParameter: (DlFcParameter name: each)].	aDlAnalyzableMethod isPrivate		ifTrue: [anUmlXmiOperation visibility: 'protected'].	anUmlXmiOperation protocol: aDlAnalyzableMethod category name.	self properties commentAsDocument		ifTrue: [anUmlXmiOperation documentation: aDlAnalyzableMethod comment]		ifFalse: [anUmlXmiOperation comment: aDlAnalyzableMethod comment].	^ anUmlXmiOperation! !!DlXmiUmlOutputter methodsFor: 'private' stamp: 'mu 11/18/2004 00:43'!timestampString	^('_', DateAndTime now printString copyReplaceAll: ':' with: '') readStream upTo: $+ ! !!DlXmiUmlOutputter methodsFor: 'private' stamp: 'MU 4/12/2002 11:29'!toBeWrittenElements	| packages |	packages := OrderedCollection new.	self analysisStorage getAllClassCategories do: [:each | packages add: (self packageOn: each).].	packages add: self primitiveTypesPackage.	packages add: self unresolvedPackage.	^packages	! !!DlXmiUmlOutputter methodsFor: 'private' stamp: 'MU 4/5/2002 16:57'!typeIsPrimitive: aTypeName 	^ (self properties primitiveTypes)		includes: aTypeName! !!DlXmiUmlOutputter methodsFor: 'converting' stamp: 'MU 4/12/2002 11:25'!asChangeSetOutputter	^self as: DlXmiUmlChangeSetOutputter! !!DlXmiUmlOutputter methodsFor: 'factory' stamp: 'MU 3/19/2002 16:16'!defaultActionSequence	^#(	#outputClassCategories	).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlXmiUmlOutputter class	instanceVariableNames: ''!!DlXmiUmlOutputter class methodsFor: 'property' stamp: 'MU 3/19/2002 16:32'!defaultProperties	^ DlXmiUmlOutputProperties new inherit: super defaultProperties! !DlXmiUmlOutputter subclass: #DlXmiUmlChangeSetOutputter	instanceVariableNames: 'removedClassCategoriesDict removedClassesDict removedPackage'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-outputter-xmi-uml'!!DlXmiUmlChangeSetOutputter methodsFor: 'actions-writing' stamp: 'mu 11/13/2004 02:32'!writeElements	self toBeWrittenElements		do: [:each | self model add: each].	self addRemovedElements.	self root printXmlOn: self outStream! !!DlXmiUmlChangeSetOutputter methodsFor: 'accessing' stamp: 'MU 4/12/2002 11:38'!removedClassCategoriesDict	removedClassCategoriesDict isNil ifTrue:[ removedClassCategoriesDict := Dictionary new].	^removedClassCategoriesDict! !!DlXmiUmlChangeSetOutputter methodsFor: 'accessing' stamp: 'MU 4/12/2002 11:38'!removedClassCategoriesDict: aValue	removedClassCategoriesDict := aValue! !!DlXmiUmlChangeSetOutputter methodsFor: 'accessing' stamp: 'MU 4/12/2002 11:38'!removedClassesDict	removedClassesDict isNil ifTrue:[ removedClassesDict := Dictionary new].	^removedClassesDict! !!DlXmiUmlChangeSetOutputter methodsFor: 'accessing' stamp: 'MU 4/12/2002 11:39'!removedClassesDict: aValue	removedClassesDict := aValue! !!DlXmiUmlChangeSetOutputter methodsFor: 'accessing' stamp: 'MU 4/12/2002 11:59'!removedPackage	removedPackage isNil ifTrue:[ removedPackage := DlMmPackage name: self properties removedName].	^removedPackage! !!DlXmiUmlChangeSetOutputter methodsFor: 'cache mgmt' stamp: 'MU 4/12/2002 11:58'!clearAll	super clearAll.	removedPackage := nil.! !!DlXmiUmlChangeSetOutputter methodsFor: 'cache mgmt' stamp: 'MU 4/12/2002 11:50'!clearElementCache	removedClassCategoriesDict := removedClassesDict := nil.	super clearElementCache.! !!DlXmiUmlChangeSetOutputter methodsFor: 'cache mgmt' stamp: 'MU 4/12/2002 13:39'!prepareElementCache	| cha classDictRegister |	super prepareElementCache.	cha := self changeSet.	classDictRegister := 			[:eachMethod | 			| cls | 			cls := eachMethod klass.			(self removedClassesDict includesKey: cls)				ifFalse: 					[| fcCls | 					fcCls := DlFcClass name: cls name.					self removedClassesDict at: cls put: fcCls]].	cha removedInstMethods do: classDictRegister.	cha removedClassMethods do: classDictRegister.	cha addedThenRemovedInstMethods do: classDictRegister.	cha addedThenRemovedClassMethods do: classDictRegister.	self removedClassesDict		keysAndValuesDo: 			[:eachCls :eachFcCls | 			| cat | 			cat := eachCls category.			(self removedClassCategoriesDict includesKey: cat)				ifFalse: 					[| fcCat | 					fcCat := DlMmPackage name: cat name.					self removedClassCategoriesDict at: cat put: fcCat].			(self removedClassCategoriesDict at: eachCls category)				add: eachFcCls].	self removedClassCategoriesDict valuesDo: [:eachMmCat | self removedPackage add: eachMmCat]! !!DlXmiUmlChangeSetOutputter methodsFor: 'private' stamp: 'MU 4/12/2002 13:20'!addRemovedClasses	| cha clsSetter |	cha := self changeSet.	clsSetter := 			[:each | 			| fcCls | 			fcCls := DlFcClass name: each name.			fcCls tagAt: (self properties changesName) put: each minorKey.			(self removedClassCategoriesDict includesKey: each category)				ifTrue: [(self removedClassCategoriesDict at: each category)						addClass: fcCls]				ifFalse: [self removedPackage add: fcCls]].	cha removedClasses do: clsSetter.	cha addedThenRemovedClasses do: clsSetter! !!DlXmiUmlChangeSetOutputter methodsFor: 'private' stamp: 'MU 4/12/2002 12:17'!addRemovedElements	self addRemovedClasses.	self addRemovedOperations.	! !!DlXmiUmlChangeSetOutputter methodsFor: 'private' stamp: 'MU 4/12/2002 13:42'!addRemovedOperations	| cha |	cha := self changeSet.	(cha removedInstMethods, cha removedClassMethods) do: 		[:each | 		| fcOpe fcCls | 		fcOpe := DlFcOperation name: each name.		fcOpe tagAt: (self properties changesName) put: each minorKey.		fcCls := self removedClassesDict at: each klass.		fcCls addMethod: fcOpe].	(cha addedThenRemovedInstMethods, cha addedThenRemovedClassMethods) do: 		[:each | 		| fcOpe fcCls | 		fcOpe := DlFcOperation name: each isClassMethod: true.		fcOpe tagAt: (self properties changesName) put: each minorKey.		fcCls := self removedClassesDict at: each klass.		fcCls addMethod: fcOpe].! !!DlXmiUmlChangeSetOutputter methodsFor: 'private' stamp: 'MU 4/12/2002 11:23'!changeSet	"Currently assuming only one changeSet"	^self analysisStorage getAllChangeSets first.! !!DlXmiUmlChangeSetOutputter methodsFor: 'private' stamp: 'MU 4/12/2002 11:23'!petalFilename	^self changeSet name.! !!DlXmiUmlChangeSetOutputter methodsFor: 'private' stamp: 'MU 4/12/2002 12:09'!toBeWrittenElements	^ super toBeWrittenElements add: self removedPackage;		 yourself! !