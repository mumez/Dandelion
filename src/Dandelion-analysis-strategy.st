DlIntrospectStrategy subclass: #DlAbstractAnalysisStrategy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-analysis-strategy'!!DlAbstractAnalysisStrategy commentStamp: '<historical>' prior: 0!Delegeted by Analyzables, I perform actual analysis processes.I will use introspectors to collect analisys information.In Analyzables iteration, each Analyzables visits me as a callback method parameter.So I can set the analyzed information to the visitors.callbacks:#(analyzeChangeSetOn: analyzeClassCategoryOn: analyzeClassInstMethodOn: analyzeClassInstVariableOn: analyzeClassMethodCategoryOn: analyzeClassMethodOn: analyzeClassOn: analyzeClassVariableOn: analyzeGlobalRootOn: analyzeGlobalVariableOn: analyzeInstMethodCategoryOn: analyzeInstMethodOn: analyzeInstVariableOn: analyzeMethodCategoryOn: analyzeMethodOn: analyzeOn: analyzePoolOn: analyzePoolVariableOn: analyzeVariableOn:)#creator [:masashi | ^umezawa] #version 0.5 !!DlAbstractAnalysisStrategy methodsFor: 'actions-callback' stamp: 'M.U 12/5/1999 21:59'!analyzeChangeSetOn: aDlAnalyzableChangeSet		self analyzeOn: aDlAnalyzableChangeSet	! !!DlAbstractAnalysisStrategy methodsFor: 'actions-callback' stamp: 'M.U. 9/18/1999 17:53'!analyzeClassCategoryOn: aDlAnalyzableClassCategory	self analyzeOn: aDlAnalyzableClassCategory! !!DlAbstractAnalysisStrategy methodsFor: 'actions-callback' stamp: 'M.U. 9/18/1999 17:53'!analyzeClassInstMethodOn: aDlAnalyzableClassInstMethod	self analyzeOn: aDlAnalyzableClassInstMethod! !!DlAbstractAnalysisStrategy methodsFor: 'actions-callback' stamp: 'M.U. 9/18/1999 17:53'!analyzeClassInstVariableOn: aDlAnalyzableClassInstVariable	self analyzeOn: aDlAnalyzableClassInstVariable! !!DlAbstractAnalysisStrategy methodsFor: 'actions-callback' stamp: 'M.U. 9/18/1999 17:54'!analyzeClassMethodCategoryOn: aDlAnalyzableClassMethodCategory	self analyzeOn: aDlAnalyzableClassMethodCategory! !!DlAbstractAnalysisStrategy methodsFor: 'actions-callback' stamp: 'M.U. 9/18/1999 17:54'!analyzeClassMethodOn: aDlAnalyzableClassMethod	self analyzeOn: aDlAnalyzableClassMethod! !!DlAbstractAnalysisStrategy methodsFor: 'actions-callback' stamp: 'M.U. 9/18/1999 17:54'!analyzeClassOn: aDlAnalyzableClass	self analyzeOn: aDlAnalyzableClass! !!DlAbstractAnalysisStrategy methodsFor: 'actions-callback' stamp: 'M.U. 9/18/1999 17:54'!analyzeClassVariableOn: aDlAnalyzableClassVariable	self analyzeOn: aDlAnalyzableClassVariable! !!DlAbstractAnalysisStrategy methodsFor: 'actions-callback' stamp: 'M.U 12/27/1999 00:25'!analyzeGlobalRootOn: aDlAnalyzableGlobalPool	self analyzeOn: aDlAnalyzableGlobalPool! !!DlAbstractAnalysisStrategy methodsFor: 'actions-callback' stamp: 'M.U. 9/18/1999 17:54'!analyzeGlobalVariableOn: aDlAnalyzableGlobalVariable	self analyzeOn: aDlAnalyzableGlobalVariable! !!DlAbstractAnalysisStrategy methodsFor: 'actions-callback' stamp: 'M.U. 9/18/1999 17:54'!analyzeInstMethodCategoryOn: aDlAnalyzableInstMethodCategory	self analyzeOn: aDlAnalyzableInstMethodCategory! !!DlAbstractAnalysisStrategy methodsFor: 'actions-callback' stamp: 'M.U. 9/18/1999 17:54'!analyzeInstMethodOn: aDlAnalyzableInstMehod	self analyzeOn: aDlAnalyzableInstMehod! !!DlAbstractAnalysisStrategy methodsFor: 'actions-callback' stamp: 'M.U. 9/18/1999 17:54'!analyzeInstVariableOn: aDlAnalyzableInstVariable	self analyzeOn: aDlAnalyzableInstVariable! !!DlAbstractAnalysisStrategy methodsFor: 'actions-callback' stamp: 'M.U. 9/18/1999 17:54'!analyzeMethodCategoryOn: aDlAnalyzableMethodCategory	self analyzeOn: aDlAnalyzableMethodCategory! !!DlAbstractAnalysisStrategy methodsFor: 'actions-callback' stamp: 'M.U. 9/18/1999 17:55'!analyzeMethodOn: aDlAnalyzableMethod	self analyzeOn: aDlAnalyzableMethod! !!DlAbstractAnalysisStrategy methodsFor: 'actions-callback' stamp: 'M.U. 9/18/1999 17:53'!analyzeOn: aDlAnalyzable	"default do nothing"! !!DlAbstractAnalysisStrategy methodsFor: 'actions-callback' stamp: 'M.U. 9/18/1999 17:53'!analyzePoolOn: aDlAnalyzablePool	self analyzeOn: aDlAnalyzablePool! !!DlAbstractAnalysisStrategy methodsFor: 'actions-callback' stamp: 'M.U. 9/18/1999 17:53'!analyzePoolVariableOn: aDlAnalyzablePoolVariable	self analyzeOn: aDlAnalyzablePoolVariable! !!DlAbstractAnalysisStrategy methodsFor: 'actions-callback' stamp: 'M.U. 9/18/1999 17:53'!analyzeVariableOn: aDlAnalyzableVariable	self analyzeOn: aDlAnalyzableVariable! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlAbstractAnalysisStrategy class	instanceVariableNames: ''!!DlAbstractAnalysisStrategy class methodsFor: 'instance creation' stamp: 'MU 12/31/1998 02:13'!new	^super new initialize! !DlAbstractAnalysisStrategy subclass: #DlSimpleAnalysisStrategy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-analysis-strategy'!!DlSimpleAnalysisStrategy commentStamp: '<historical>' prior: 0!I simply analyze classes and methods.Some analysis policies are changable by setting properties.#creator [:masashi | ^umezawa] #version 0.5!!DlSimpleAnalysisStrategy methodsFor: 'actions' stamp: 'mu 1/1/2001 00:34'!analyzeChangeSetOn: aDlAnalyzableChangeSet	| cSet chgSetIs |	super analyzeChangeSetOn: aDlAnalyzableChangeSet.	cSet := aDlAnalyzableChangeSet.	chgSetIs := self cacheChangeSetIntrospectorOn: aDlAnalyzableChangeSet target.	cSet preamble: chgSetIs getPreamble.	cSet postscript: chgSetIs getPostscript.		^cSet! !!DlSimpleAnalysisStrategy methodsFor: 'actions' stamp: 'MU 6/18/2000 02:42'!analyzeClassMethodOn: aDlAnalyzableClassMethod 	| is m nm tCls |	super analyzeClassMethodOn: aDlAnalyzableClassMethod.	tCls := aDlAnalyzableClassMethod scopeSpecifier.	tCls isNil		ifFalse: 			[is := self cacheClassIntrospectorOn: tCls.			m := aDlAnalyzableClassMethod.			nm := m name.			m signature: (is getClassMethodHeadOf: nm).			self shouldAnalyzeMethodSource ifTrue: [			m source: (is getClassMethodSourceOf: nm).			m sourceBody: (is getClassMethodBodyOf: nm)].			self shouldAnalyzeMethodComments				ifTrue: 					[m comment: (is getClassMethodFirstCommentOf: nm).					m tagAt: #allComments put: (is getClassMethodAllCommentsOf: nm)].			].	! !!DlSimpleAnalysisStrategy methodsFor: 'actions' stamp: 'mu 11/23/2004 01:19'!analyzeClassOn: aDlAnalyzableClass 	| tCls is cls comment |	super analyzeClassOn: aDlAnalyzableClass.	tCls := aDlAnalyzableClass target.	self classIntrospector: (self defaultClassIntrospectorClass on: tCls).	is := self classIntrospector.	cls := aDlAnalyzableClass.	comment := is getClassComment.	cls comment: comment.	cls indexableInstVarType: is getIndexableInstVarType.	! !!DlSimpleAnalysisStrategy methodsFor: 'actions' stamp: 'MU 6/18/2000 02:40'!analyzeInstMethodOn: aDlAnalyzableInstMethod 	| is m nm tCls |	super analyzeInstMethodOn: aDlAnalyzableInstMethod.	tCls := aDlAnalyzableInstMethod scopeSpecifier.	tCls isNil		ifFalse: 			[is := self cacheClassIntrospectorOn: tCls.			m := aDlAnalyzableInstMethod.			nm := m name.			m signature: (is getInstMethodHeadOf: nm).			self shouldAnalyzeMethodSource ifTrue: [			m source: (is getInstMethodSourceOf: nm).			m sourceBody: (is getInstMethodBodyOf: nm)].			self shouldAnalyzeMethodComments				ifTrue: 					[m comment: (is getInstMethodFirstCommentOf: nm).					m tagAt: #allComments put: (is getInstMethodAllCommentsOf: nm)].			].	! !!DlSimpleAnalysisStrategy methodsFor: 'testing' stamp: 'M.U 12/23/1999 23:52'!shouldAnalyzeMethodComments	^self properties at: #analyzeMethodComments! !!DlSimpleAnalysisStrategy methodsFor: 'testing' stamp: 'MU 6/18/2000 02:40'!shouldAnalyzeMethodSource	^self properties at: #analyzeMethodSource! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlSimpleAnalysisStrategy class	instanceVariableNames: ''!!DlSimpleAnalysisStrategy class methodsFor: 'property' stamp: 'MU 6/18/2000 02:44'!defaultProperties	"	* analyzeMethodComments (true) - whether or not method comments are analyzed	* analyzeMethodSource (true) -  whether or not method sources are analyzed	"	^super defaultProperties		at: #analyzeMethodComments put: true;		at: #analyzeMethodSource put: true;		yourself.! !DlSimpleAnalysisStrategy subclass: #DlElaborateAnalysisStrategy	instanceVariableNames: 'dynamicVariableIntrospector classCommentVariableIntrospector'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-analysis-strategy'!!DlElaborateAnalysisStrategy commentStamp: '<historical>' prior: 0!I mainly focus on analyzing variables.I use DlDynamicVariableIntrospector and DlClassCommentVariableIntrospector.#creator [:masashi | ^umezawa] #version 0.5!!DlElaborateAnalysisStrategy methodsFor: 'actions' stamp: 'MU 10/2/2000 00:40'!analyzeClassInstVariableOn: aDlAnalyzableClassInstVariable 	| v nm tCls dynVIs ccVIs tp |	super analyzeClassInstVariableOn: aDlAnalyzableClassInstVariable.	v := aDlAnalyzableClassInstVariable.	tCls := v scopeSpecifier.	tCls isNil		ifFalse: 			[nm := v name.			self shouldUseDynamicVariableIntrospector				ifTrue: 					[dynVIs := self cacheDynamicVariableIntrospectorOn: tCls.					v initialValue: (dynVIs getClassInstVarInitialValueOf: nm).					tp := dynVIs getClassInstVarTypeOf: nm.					v tagAt: #inferredType put: tp.					self variableRepresentedType == #inferredType ifTrue: [v type: tp]].			self shouldUseClassCommentVariableIntrospector				ifTrue: 					[ccVIs := self cacheClassCommentVariableIntrospectorOn: tCls.					v comment: (ccVIs getClassInstVarCommentOf: nm).					tp := ccVIs getClassInstVarTypeOf: nm.					v tagAt: #annotatedType put: tp.					self variableRepresentedType == #annotedType ifTrue: [v type: tp]]].	^ v! !!DlElaborateAnalysisStrategy methodsFor: 'actions' stamp: 'MU 10/1/2000 00:17'!analyzeClassMethodOn: aDlAnalyzableClassMethod 	| tCls |	super analyzeClassMethodOn: aDlAnalyzableClassMethod.	tCls := aDlAnalyzableClassMethod scopeSpecifier.	tCls isNil		ifFalse: 			[| is isPrivate |			is := self cacheClassIntrospectorOn: tCls.			aDlAnalyzableClassMethod arguments: (is getClassMethodNameArgsOf: aDlAnalyzableClassMethod name).			isPrivate := 'private*' match: aDlAnalyzableClassMethod category name.			aDlAnalyzableClassMethod isPrivate: isPrivate].! !!DlElaborateAnalysisStrategy methodsFor: 'actions' stamp: 'MU 10/2/2000 00:40'!analyzeClassVariableOn: aDlAnalyzableClassVariable 	| v nm tCls dynVIs ccVIs tp |	super analyzeClassVariableOn: aDlAnalyzableClassVariable.	v := aDlAnalyzableClassVariable.	tCls := v scopeSpecifier.	tCls isNil		ifFalse: 			[nm := v name.			(self shouldUseDynamicVariableIntrospector)				ifTrue: 					[dynVIs := self cacheDynamicVariableIntrospectorOn: tCls.					v initialValue: (dynVIs getClassVarInitialValueOf: nm).					tp := dynVIs getClassVarTypeOf: nm.					v tagAt: #inferredType put: tp.					((self variableRepresentedType) == #inferredType) ifTrue: [v type: tp]].			(self shouldUseClassCommentVariableIntrospector)				ifTrue: 					[ccVIs := self cacheClassCommentVariableIntrospectorOn: tCls.					v comment: (ccVIs getClassVarCommentOf: nm).					tp := ccVIs getClassVarTypeOf: nm.					v tagAt: #annotatedType put: tp.					((self variableRepresentedType) == #annotedType) ifTrue: [v type: tp]]].	^ v.! !!DlElaborateAnalysisStrategy methodsFor: 'actions' stamp: 'MU 10/1/2000 00:17'!analyzeInstMethodOn: aDlAnalyzableInstMethod 	| tCls |	super analyzeInstMethodOn: aDlAnalyzableInstMethod.	tCls := aDlAnalyzableInstMethod scopeSpecifier.	tCls isNil		ifFalse: 			[| is isPrivate |			is := self cacheClassIntrospectorOn: tCls.			aDlAnalyzableInstMethod arguments: (is getInstMethodNameArgsOf: aDlAnalyzableInstMethod name).			isPrivate := 'private*' match: aDlAnalyzableInstMethod category name.			aDlAnalyzableInstMethod isPrivate: isPrivate].! !!DlElaborateAnalysisStrategy methodsFor: 'actions' stamp: 'MU 10/2/2000 00:38'!analyzeInstVariableOn: aDlAnalyzableInstVariable 	| v nm tCls dynVIs ccVIs tp |	super analyzeInstVariableOn: aDlAnalyzableInstVariable.	v := aDlAnalyzableInstVariable.	tCls := v scopeSpecifier.	tCls isNil		ifFalse: 			[nm := v name.			self shouldUseDynamicVariableIntrospector				ifTrue: 					[dynVIs := self cacheDynamicVariableIntrospectorOn: tCls.					v initialValue: (dynVIs getInstVarInitialValueOf: nm).					tp := dynVIs getInstVarTypeOf: nm.					v tagAt: #inferredType put: tp.					self variableRepresentedType == #inferredType ifTrue: [v type: (v tagAt: #inferredType)]].			self shouldUseClassCommentVariableIntrospector				ifTrue: 					[ccVIs := self cacheClassCommentVariableIntrospectorOn: tCls.					v comment: (ccVIs getInstVarCommentOf: nm).					tp := ccVIs getInstVarTypeOf: nm.					v tagAt: #annotatedType put: tp.					self variableRepresentedType == #annotedType ifTrue: [v type: tp]]].	^ v! !!DlElaborateAnalysisStrategy methodsFor: 'accessing-caching' stamp: 'M.U 5/9/1999 01:12'!cacheClassCommentVariableIntrospectorOn: aClass 	((self classCommentVariableIntrospector isNil) or: [self classCommentVariableIntrospector target ~~ aClass])		ifTrue: [self classCommentVariableIntrospector: (self defaultClassCommentVariableIntrospectorClass on: aClass)].	^ self classCommentVariableIntrospector.! !!DlElaborateAnalysisStrategy methodsFor: 'accessing-caching' stamp: 'M.U 12/23/1999 23:45'!cacheDynamicVariableIntrospectorOn: aClass 	((self dynamicVariableIntrospector) isNil or: [self dynamicVariableIntrospector target ~~ aClass])		ifTrue: 			[self dynamicVariableIntrospector: (self defaultDynamicVariableIntrospectorClass on: aClass).			 self dynamicVariableIntrospector isLazySupport: self isDynamicVariableIntrospectorLazySupport].	^ self dynamicVariableIntrospector.! !!DlElaborateAnalysisStrategy methodsFor: 'accessing' stamp: 'M.U 4/29/1999 19:21'!classCommentVariableIntrospector	^classCommentVariableIntrospector! !!DlElaborateAnalysisStrategy methodsFor: 'accessing' stamp: 'M.U 4/29/1999 19:22'!classCommentVariableIntrospector: aValue	classCommentVariableIntrospector := aValue! !!DlElaborateAnalysisStrategy methodsFor: 'accessing' stamp: 'M.U 4/29/1999 19:21'!dynamicVariableIntrospector	^dynamicVariableIntrospector! !!DlElaborateAnalysisStrategy methodsFor: 'accessing' stamp: 'M.U 4/29/1999 19:22'!dynamicVariableIntrospector: aValue	dynamicVariableIntrospector := aValue! !!DlElaborateAnalysisStrategy methodsFor: 'accessing-property' stamp: 'M.U 12/23/1999 23:42'!variableRepresentedType	^self properties at: #variableRepresentedType	! !!DlElaborateAnalysisStrategy methodsFor: 'testing' stamp: 'M.U 12/23/1999 23:44'!isDynamicVariableIntrospectorLazySupport	^self properties at: #isDynamicVariableIntrospectorLazySupport! !!DlElaborateAnalysisStrategy methodsFor: 'testing' stamp: 'M.U 12/23/1999 23:37'!shouldUseClassCommentVariableIntrospector	^self properties at: #useClassCommentVariableIntrospector! !!DlElaborateAnalysisStrategy methodsFor: 'testing' stamp: 'M.U 12/23/1999 23:36'!shouldUseDynamicVariableIntrospector	^self properties at: #useDynamicVariableIntrospector! !!DlElaborateAnalysisStrategy methodsFor: 'factory' stamp: 'M.U 4/29/1999 19:20'!defaultClassCommentVariableIntrospectorClass	^DlClassCommentVariableIntrospector! !!DlElaborateAnalysisStrategy methodsFor: 'factory' stamp: 'MU 3/26/2000 23:38'!defaultDynamicVariableIntrospectorClass	^ Smalltalk at: (self properties at: #dynamicVariableIntrospectorClass)		ifAbsent: [DlDynamicVariableIntrospector].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlElaborateAnalysisStrategy class	instanceVariableNames: ''!!DlElaborateAnalysisStrategy class methodsFor: 'property' stamp: 'MU 3/26/2000 23:35'!defaultProperties	"	* useClassCommentVariableIntrospector (true/false) - if true DlClassCommentVariableIntrospector is used	* useDynamicVariableIntrospector (true/false) - if true DlDynamicVariableIntrospector is used	* representedType (#inferredType/#annotatedType) - specify which is represented as type	* dynamicVariableIntrospectorIsLazySupport (true/false) - if true DlDynamicVariableIntrospector will introspect by seeing lazy initializations	* dynamicVariableIntrospectorClass - specify dynamicVariableIntrospector implementaion class	"	^super defaultProperties		at: #useClassCommentVariableIntrospector put: true;		at: #useDynamicVariableIntrospector put: true;		at: #variableRepresentedType put: #inferredType;		at: #isDynamicVariableIntrospectorLazySupport put: true;		at: #dynamicVariableIntrospectorClass put: #DlDynamicVariableIntrospector;		yourself.	 ! !