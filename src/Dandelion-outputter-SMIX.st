DlConvertibleOutputter subclass: #DlAbstractSmixOutputter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-outputter-SMIX'!!DlAbstractSmixOutputter commentStamp: '<historical>' prior: 0!I am an abstract class for SMIX output.#creator[:masashi | ^umezawa] #version 0.1!!DlAbstractSmixOutputter methodsFor: 'factory-SMIX' stamp: 'mu 11/25/2004 01:01'!classDefinitionOn: aDlAnalyzableClass 	| classDef |	classDef := DlSmixClassDefinition className: aDlAnalyzableClass asString.	classDef superclassName: aDlAnalyzableClass superclass asString.	classDef indexedInstVarType: aDlAnalyzableClass indexableInstVarType.	classDef instVarNames: (self nameStringFrom: aDlAnalyzableClass instVariables).	classDef classVarNames: (self nameStringFrom: aDlAnalyzableClass classVariables).	classDef sharedPoolNames: (self nameStringFrom: (aDlAnalyzableClass pools)).	classDef classInstVarNames: (self nameStringFrom: aDlAnalyzableClass classInstVariables).	classDef category: aDlAnalyzableClass category asString.	self markIfCData: classDef.	^ classDef.! !!DlAbstractSmixOutputter methodsFor: 'factory-SMIX' stamp: 'mu 11/25/2004 01:03'!classInitializationOn: aDlAnalyzableClass	| initializer classNm initStr  |	initializer := aDlAnalyzableClass classMethods detect:[:each | each name == #initialize] ifNone:[].	initializer ifNil:[^nil].	classNm := aDlAnalyzableClass asString.	initStr := WriteStream on: (String new: 100).	initStr nextPutAll: classNm; nextPut: Character space; nextPutAll: #initialize.	^self markIfCData: (DlSmixClassInitialization className: classNm initializer: initStr contents).! !!DlAbstractSmixOutputter methodsFor: 'factory-SMIX' stamp: 'mu 11/25/2004 01:03'!classMethodDefinitionOn: aDlAnalyzableClassMethod 	| methodDef |	methodDef := DlSmixMethodDefinition				classMethod: aDlAnalyzableClassMethod asString				inClassNamed: aDlAnalyzableClassMethod klass asString				source: aDlAnalyzableClassMethod source.	methodDef category: aDlAnalyzableClassMethod category asString.	self markIfCData: methodDef.	^ methodDef.! !!DlAbstractSmixOutputter methodsFor: 'factory-SMIX' stamp: 'mu 11/25/2004 01:03'!globalDefinitionOn: DlAnalyzableGlobalVariable 	| globalDef |	globalDef := DlSmixGlobalDefinition globalName: DlAnalyzableGlobalVariable asString.	self markIfCData: globalDef.	^ globalDef.! !!DlAbstractSmixOutputter methodsFor: 'factory-SMIX' stamp: 'mu 11/25/2004 01:03'!globalValueInitializationOn: DlAnalyzableGlobalVariable 	| globalInit |	globalInit := DlSmixGlobalValueInitialization globalName: DlAnalyzableGlobalVariable asString initializer: DlAnalyzableGlobalVariable value printString.	self markIfCData: globalInit.	^ globalInit! !!DlAbstractSmixOutputter methodsFor: 'factory-SMIX' stamp: 'mu 11/25/2004 01:04'!methodDefinitionOn: aDlAnalyzableInstMethod 	| methodDef |	methodDef := DlSmixMethodDefinition				instMethod: aDlAnalyzableInstMethod asString				inClassNamed: aDlAnalyzableInstMethod klass asString				source: aDlAnalyzableInstMethod source.	methodDef category: aDlAnalyzableInstMethod category asString.	self markIfCData: methodDef.	^ methodDef.! !!DlAbstractSmixOutputter methodsFor: 'factory-SMIX' stamp: 'mu 11/25/2004 01:11'!newRoot	^DlSmixRootElement newRoot: (self properties at:#smixVersion).! !!DlAbstractSmixOutputter methodsFor: 'factory-SMIX' stamp: 'mu 11/25/2004 01:04'!poolDefinitionOn: DlAnalyzablePool 	| poolDef |	poolDef := DlSmixPoolDefinition poolName: DlAnalyzablePool asString.	self markIfCData: poolDef.	^ poolDef! !!DlAbstractSmixOutputter methodsFor: 'factory-SMIX' stamp: 'mu 11/25/2004 01:04'!poolValueInitializationOn: DlAnalyzablePoolVariable 	| poolValueInit |	poolValueInit := DlSmixPoolValueInitialization				poolName: DlAnalyzablePoolVariable pool asString				poolVariableName: DlAnalyzablePoolVariable asString				initializer: DlAnalyzablePoolVariable value printString.	"more sofisticated initializer will be needed - MU 7/8/2000 23:56"	self markIfCData: poolValueInit.	^ poolValueInit.! !!DlAbstractSmixOutputter methodsFor: 'factory-SMIX' stamp: 'mu 11/25/2004 01:04'!poolVariableDefinitionOn: DlAnalyzablePoolVariable 	| poolVariableDef |	poolVariableDef := DlSmixPoolVariableDefinition poolName: DlAnalyzablePoolVariable pool asString poolVariableName: DlAnalyzablePoolVariable asString.	self markIfCData: poolVariableDef.	^ poolVariableDef! !!DlAbstractSmixOutputter methodsFor: 'private' stamp: 'mu 11/25/2004 01:17'!markIfCData: aSmixElement	aSmixElement isPrintCData: (self properties at: #printCData).	^aSmixElement	! !!DlAbstractSmixOutputter methodsFor: 'private' stamp: 'MU 6/25/2000 23:29'!nameStringFrom: aCollectionOfAnalyzable	| str |	str := WriteStream on: (String new: 64).	aCollectionOfAnalyzable collect:[:each | str nextPutAll: each asString; space].	^str contents! !!DlAbstractSmixOutputter methodsFor: 'private' stamp: 'MU 6/25/2000 23:29'!superclassOrderFrom: aCollectionOfDlAnalyzableClasses 	| all list i aClass |	list := aCollectionOfDlAnalyzableClasses copy.	all := OrderedCollection new: list size.	[list size > 0]		whileTrue: 			[i := 0.			[i := i + 1.			aClass := list at: i.			list includesAnyOf: aClass allSuperclasses] whileTrue.			all addLast: aClass.			list := list copyWithout: aClass].	^ all.! !!DlAbstractSmixOutputter methodsFor: 'converting' stamp: 'MU 7/7/2000 00:09'!asChangeSetOutputter	^self as: DlSmixChangeSetOutputter! !!DlAbstractSmixOutputter methodsFor: 'converting' stamp: 'MU 7/7/2000 00:10'!asStandardOutputter	^self as: DlSmixClassCategoryOutputter! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlAbstractSmixOutputter class	instanceVariableNames: ''!!DlAbstractSmixOutputter class methodsFor: 'property' stamp: 'mu 11/25/2004 01:06'!defaultProperties	"	* smixSuffix - SMIX file name suffix	* smixVersion - SMIX version	* classDefinitionsFilename - class definitions filename	* classInitializerFilename - class initializer filename	* classInitializersFilename - class initializers filename	* globalDirectoryName - global def/init directory name	* poolDirectoryName - pool def/init directory name	* methodsFilename - method definition filename	* instMethodsFilename - instance method definition filename	* classMethodsFilename - class method definition filename	* printCData - codes should be written in CDATA	"	^super defaultProperties		at: #smixSuffix put: '_smix.xml';		at: #smixVersion put: '2.0';		at: #globalDirectoryName put: 'global';		at: #poolDirectoryName put: 'pool';		at: #classDefinitionsFilename put: '(class definitions)';		at: #classInitializerFilename put: '(class initializer)';		at: #classInitializersFilename put: '(class initializers)';		at: #methodsFilename put: '(methods)';		at: #instMethodsFilename put: '(instance methods)';		at: #classMethodsFilename put: '(class methods)';		at: #printCData put: true;		yourself.! !DlAbstractSmixOutputter subclass: #DlSmixChangeSetOutputter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-outputter-SMIX'!!DlSmixChangeSetOutputter commentStamp: '<historical>' prior: 0!I write changeSet contents in SMIX format.#creator[:masashi | ^umezawa] #version 0.1!!DlSmixChangeSetOutputter methodsFor: 'actions-output' stamp: 'MU 1/6/2001 02:41'!outputClassDefinitions	| cs props suffix defName fName |	cs := self changeSet.	props := self properties.	suffix := props at: #smixSuffix.	defName := props at: #classDefinitionsFilename.	fName := cs asString , defName , suffix.	self writeClassDefinitions: cs addedClasses changeType: 'added' fileName: fName.	self writeClassDefinitions: cs changedClasses changeType: 'changed' fileName: fName.	self writeClassDefinitions: cs removedClasses changeType: 'removed' fileName: fName.	self writeClassDefinitions: cs addedThenRemovedClasses changeType: 'addedThenRemoved' fileName: fName.	! !!DlSmixChangeSetOutputter methodsFor: 'actions-output' stamp: 'MU 1/6/2001 02:41'!outputClassInitializers	| cs props suffix initName fName |	cs := self changeSet.	props := self properties.	suffix := props at: #smixSuffix.	initName := props at: #classInitializersFilename.	fName := cs asString , initName , suffix.	self writeClassInitializers: cs addedClasses changeType: 'added' fileName: fName.	self writeClassInitializers: cs changedClasses changeType: 'changed' fileName: fName.	self writeClassInitializers: cs removedClasses changeType: 'removed' fileName: fName.	self writeClassInitializers: cs addedThenRemovedClasses changeType: 'addedThenRemoved' fileName: fName.! !!DlSmixChangeSetOutputter methodsFor: 'actions-output' stamp: 'MU 1/6/2001 02:47'!outputClassMethods	| cs props suffix mName fName |	cs := self changeSet.	props := self properties.	suffix := props at: #smixSuffix.	mName := props at:#classMethodsFilename.	fName := cs asString , mName , suffix.	self writeClassMethods: cs addedClassMethods changeType: 'added' fileName: fName.	self writeClassMethods: cs changedClassMethods changeType: 'changed' fileName: fName.	self writeClassMethods: cs removedClassMethods changeType: 'removed' fileName: fName.	self writeClassMethods: cs addedThenRemovedClassMethods changeType: 'addedThenRemoved' fileName: fName.	! !!DlSmixChangeSetOutputter methodsFor: 'actions-output' stamp: 'MU 1/6/2001 02:42'!outputInstMethods	| cs props suffix mName fName |	cs := self changeSet.	props := self properties.	suffix := props at: #smixSuffix.	mName := props at:#instMethodsFilename.	fName := cs asString , mName , suffix.	self writeInstMethods: cs addedInstMethods changeType: 'added' fileName: fName.	self writeInstMethods: cs changedInstMethods changeType: 'changed' fileName: fName.	self writeInstMethods: cs removedInstMethods changeType: 'removed' fileName: fName.	self writeInstMethods: cs addedThenRemovedInstMethods changeType: 'addedThenRemoved' fileName: fName.! !!DlSmixChangeSetOutputter methodsFor: 'actions-writing' stamp: 'MU 1/6/2001 02:32'!writeClassDefinitions: aCollectionOfDlAnalyzableClass changeType: aChangeTypeString fileName: aFilenameString	| root str |	aCollectionOfDlAnalyzableClass isEmpty ifTrue:[^self].	root := self newRoot.	self addClassDefinitions: aCollectionOfDlAnalyzableClass on: root	changeType: aChangeTypeString.	str := self outStreamNamed: aFilenameString in: (Array with: self changeSet asString with: aChangeTypeString).	root printXmlOn: str.	str close.! !!DlSmixChangeSetOutputter methodsFor: 'actions-writing' stamp: 'MU 1/6/2001 02:32'!writeClassInitializers: aCollectionOfDlAnalyzableClass changeType: aChangeTypeString fileName: aFilenameString	| root str |	aCollectionOfDlAnalyzableClass isEmpty ifTrue:[^self].	root := self newRoot.	self addClassInitializers: aCollectionOfDlAnalyzableClass on: root	changeType: aChangeTypeString.	str := self outStreamNamed: aFilenameString in: (Array with: self changeSet asString with: aChangeTypeString).	root printXmlOn: str.	str close.! !!DlSmixChangeSetOutputter methodsFor: 'actions-writing' stamp: 'MU 1/6/2001 02:32'!writeClassMethods: aCollectionOfDlAnalyzableMethod changeType: aChangeTypeString fileName: aFilenameString	| root str |	aCollectionOfDlAnalyzableMethod isEmpty ifTrue:[^self].	root := self newRoot.	self addClassMethods: aCollectionOfDlAnalyzableMethod on: root changeType: aChangeTypeString.	str := self outStreamNamed: aFilenameString in: (Array with: self changeSet asString with: aChangeTypeString).	root printXmlOn: str.	str close.! !!DlSmixChangeSetOutputter methodsFor: 'actions-writing' stamp: 'MU 1/6/2001 02:32'!writeInstMethods: aCollectionOfDlAnalyzableMethod changeType: aChangeTypeString fileName: aFilenameString	| root str |	aCollectionOfDlAnalyzableMethod isEmpty ifTrue:[^self].	root := self newRoot.	self addInstMethods: aCollectionOfDlAnalyzableMethod on: root changeType: aChangeTypeString.	str := self outStreamNamed: aFilenameString in: (Array with: self changeSet asString with: aChangeTypeString).	root printXmlOn: str.	str close.! !!DlSmixChangeSetOutputter methodsFor: 'private' stamp: 'MU 6/25/2000 23:31'!addClassDefinitions: classes on: aDlSmixRootElement changeType: aString 	| superClassOrder |	superClassOrder := self superclassOrderFrom: classes.	superClassOrder do: 		[:eachCls | 		| def | 		def := self classDefinitionOn: eachCls.		def changeType: aString.		aDlSmixRootElement add: def]! !!DlSmixChangeSetOutputter methodsFor: 'private' stamp: 'mu 1/3/2001 22:50'!addClassInitializers: classes on: aDlSmixRootElement changeType: aString 	| superClassOrder |	superClassOrder := self superclassOrderFrom: classes.	superClassOrder do: 		[:eachCls | 		| def | 		def := self classInitializationOn: eachCls.		def notNil			ifTrue: 				[def changeType: aString.				aDlSmixRootElement add: def]].! !!DlSmixChangeSetOutputter methodsFor: 'private' stamp: 'MU 1/6/2001 02:13'!addClassMethods: methods on: aDlSmixRootElement changeType: aString 	methods		do: [:eachM | 			| imDef | 			imDef := self classMethodDefinitionOn: eachM.			imDef changeType: aString.			aDlSmixRootElement add: imDef]! !!DlSmixChangeSetOutputter methodsFor: 'private' stamp: 'MU 1/6/2001 02:12'!addInstMethods: methods on: aDlSmixRootElement changeType: aString 	methods		do: [:eachM | 			| imDef | 			imDef := self methodDefinitionOn: eachM.			imDef changeType: aString.			aDlSmixRootElement add: imDef]! !!DlSmixChangeSetOutputter methodsFor: 'private' stamp: 'MU 1/6/2001 01:00'!changeSet	"Currently assuming only one changeSet"	^self analysisStorage getAllChangeSets first.! !!DlSmixChangeSetOutputter methodsFor: 'factory' stamp: 'MU 1/6/2001 02:44'!defaultActionSequence	^ #(#outputClassDefinitions  #outputInstMethods #outputClassMethods #outputClassInitializers  )! !DlAbstractSmixOutputter subclass: #DlSmixClassCategoryOutputter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-outputter-SMIX'!!DlSmixClassCategoryOutputter commentStamp: '<historical>' prior: 0!I write class category contents in SMIX format. (also includes Globals).#creator[:masashi | ^umezawa] #version 0.1!!DlSmixClassCategoryOutputter methodsFor: 'actions-output' stamp: 'MU 1/6/2001 00:57'!outputClassCategories	| props suffix clsFileName |	props := self properties.	suffix := props at: #smixSuffix.	clsFileName := props at: #classDefinitionsFilename.	self analysisStorage getAllClassCategories do: 		[:each | 		| dirArray str | 		dirArray := Array with: each asString.		str := self outStreamNamed: each asString , clsFileName , suffix in: dirArray.		self writeClassDefinitionsIn: each.		str close.		self writeClassContentsIn: each]! !!DlSmixClassCategoryOutputter methodsFor: 'actions-output' stamp: 'MU 7/9/2000 01:23'!outputGlobalRoots	| suffix dirName |	suffix := self properties at: #smixSuffix.	dirName := self properties at: #globalDirectoryName.	self analysisStorage getAllGlobalRoots do: 		[:each | | str |		str := self outStreamNamed: each asString , suffix in: (Array with: dirName).		self writeGlobalRootFor: each.		str close].! !!DlSmixClassCategoryOutputter methodsFor: 'actions-output' stamp: 'MU 7/9/2000 01:23'!outputPools	| suffix dirName |	suffix := self properties at: #smixSuffix.	dirName := self properties at: #poolDirectoryName.	self analysisStorage getAllPools do: 		[:each | | str |		str := self outStreamNamed: each asString , suffix in: (Array with: dirName).		self writePoolFor: each.		str close].! !!DlSmixClassCategoryOutputter methodsFor: 'actions-writing' stamp: 'MU 1/6/2001 00:53'!writeClassContentsIn: aDlAnalyzableClassCategory 	| props methodFileName initFileName suffix |	props := self properties.	methodFileName := props at: #methodsFilename.	initFileName := props at: #classInitializerFilename.	suffix := props at: #smixSuffix.	aDlAnalyzableClassCategory classes do: 		[:each | 		| dirArray str | 		dirArray := Array with: aDlAnalyzableClassCategory asString asFileName with: each asString asFileName.		str := self outStreamNamed: each asString , methodFileName , suffix in: dirArray.		self writeMethodDefinitionsIn: each.		str close.		str := self outStreamNamed: each asString , initFileName , suffix in: dirArray.		self writeClassInitializationIn: each.		str close]! !!DlSmixClassCategoryOutputter methodsFor: 'actions-writing' stamp: 'MU 1/6/2001 00:34'!writeClassDefinitionsIn: aDlAnalyzableClassCategory 	| root superClassOrder |	root := self newRoot.	superClassOrder := (self superclassOrderFrom: aDlAnalyzableClassCategory classes).	superClassOrder do: [:eachCls | root add: (self classDefinitionOn: eachCls)].	root printXmlOn: self outStream.! !!DlSmixClassCategoryOutputter methodsFor: 'actions-writing' stamp: 'MU 1/6/2001 00:49'!writeClassInitializationIn: aDlAnalyzableClass	| root |	root := self newRoot.	root add: (self classInitializationOn: aDlAnalyzableClass).	root printXmlOn: self outStream.! !!DlSmixClassCategoryOutputter methodsFor: 'actions-writing' stamp: 'MU 7/9/2000 00:09'!writeGlobalRootFor: aDlAnalyzableGlobalRoot	| root |	root := self newRoot.	aDlAnalyzableGlobalRoot globalVariables do:[:each | root add:(self globalDefinitionOn: each)].	aDlAnalyzableGlobalRoot globalVariables do:[:each | root add:(self globalValueInitializationOn: each)].	root printXmlOn: self outStream.! !!DlSmixClassCategoryOutputter methodsFor: 'actions-writing' stamp: 'MU 1/6/2001 00:48'!writeMethodDefinitionsIn: aDlAnalyzableClass 	| root |	root := self newRoot.	aDlAnalyzableClass instMethods do: [:eachM | root add: (self methodDefinitionOn: eachM)].	aDlAnalyzableClass classMethods do: [:eachM | root add: (self classMethodDefinitionOn: eachM)].	root printXmlOn: self outStream! !!DlSmixClassCategoryOutputter methodsFor: 'actions-writing' stamp: 'MU 7/9/2000 00:09'!writePoolFor: aDlAnalyzablePool 	| root |	root := self newRoot.	root add: (self poolDefinitionOn: aDlAnalyzablePool).	aDlAnalyzablePool poolVariables do:[:each | root add:(self poolVariableDefinitionOn: each)].	aDlAnalyzablePool poolVariables do:[:each | root add:(self poolValueInitializationOn: each)].	root printXmlOn: self outStream.! !!DlSmixClassCategoryOutputter methodsFor: 'factory' stamp: 'MU 7/9/2000 00:55'!defaultActionSequence	^#(	#outputClassCategories	#outputGlobalRoots	#outputPools	).! !