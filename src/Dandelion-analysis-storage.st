Object subclass: #DlAnalysisStorage	instanceVariableNames: 'rootDict matchDict allElements isElementPut'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-analysis-storage'!!DlAnalysisStorage commentStamp: '<historical>' prior: 0!I store DlAnalyzables.The stored information will be used by DlOutputter.Currently I store all the information on memory. #creator [:masashi | ^umezawa] #version 0.5!!DlAnalysisStorage methodsFor: 'initialize-release' stamp: 'M.U 1/4/2000 22:26'!initialize	rootDict := self createModelElemDictionary.	matchDict := self createModelElemDictionary.	allElements := nil.	isElementPut := false.	! !!DlAnalysisStorage methodsFor: 'actions' stamp: 'MU 12/4/2000 01:05'!add: aDlAnalyzable 	aDlAnalyzable isNil ifTrue:[^nil].	self add: aDlAnalyzable withKey: aDlAnalyzable key.	^aDlAnalyzable! !!DlAnalysisStorage methodsFor: 'actions' stamp: 'mu 1/3/2001 00:58'!add: aDlAnalyzable withKey: aDlKey 	(aDlAnalyzable notNil and: [ aDlAnalyzable isStorable])		ifTrue: 			[ | matchCol | 			self at: aDlKey put: aDlAnalyzable.			matchCol := self matchDict at: aDlAnalyzable majorHash ifAbsentPut: [self createMatchElemCollection].			matchCol add: aDlAnalyzable].	^ aDlAnalyzable.! !!DlAnalysisStorage methodsFor: 'actions' stamp: 'M.U 10/17/1999 16:25'!addAll: aCollectionOfDlAnalyzable 	aCollectionOfDlAnalyzable do: [:each | self add: each]! !!DlAnalysisStorage methodsFor: 'actions' stamp: 'MU 1/5/1999 23:37'!do: aBlock 	self rootDict do: [:each | each do: aBlock]! !!DlAnalysisStorage methodsFor: 'actions' stamp: 'MU 12/4/2000 01:03'!find: aDlAnalyzable 	| col found |	aDlAnalyzable isNil ifTrue:[^nil].	col := self rootDict at: aDlAnalyzable key ifAbsent:[].	col isNil ifFalse:[ found := col find: aDlAnalyzable].	^found	! !!DlAnalysisStorage methodsFor: 'actions' stamp: 'M.U. 10/3/1999 01:21'!findIfAbsentAdd: aDlAnalyzable 	| found |	found := self find: aDlAnalyzable.	^ found isNil		ifTrue: [self add: aDlAnalyzable]		ifFalse: [found].! !!DlAnalysisStorage methodsFor: 'actions' stamp: 'MU 1/1/1999 17:30'!keys	^self rootDict keys! !!DlAnalysisStorage methodsFor: 'actions' stamp: 'MU 12/4/2000 01:04'!match: aDlAnalyzable 	| col |	aDlAnalyzable isNil ifTrue:[^#()].	col := self matchDict at: aDlAnalyzable majorHash ifAbsentPut:[self createMatchElemCollection].	^col select:[:each | each majorEquals: aDlAnalyzable].		! !!DlAnalysisStorage methodsFor: 'actions' stamp: 'M.U 12/20/1999 00:40'!matchIfEmptyAdd: aDlAnalyzable 	| matches |	matches := self match: aDlAnalyzable.	^ matches isEmpty		ifTrue: [matches add: (self add: aDlAnalyzable);			 yourself]		ifFalse: [matches].! !!DlAnalysisStorage methodsFor: 'actions' stamp: 'mu 12/27/2000 16:44'!merge: aDlAnalysisStorage	aDlAnalysisStorage values do:[:each | self addAll: each]	! !!DlAnalysisStorage methodsFor: 'actions' stamp: 'M.U 1/2/2000 01:38'!notAnalyzedSize	^(self select:[:each | each isAnalyzed not]) size! !!DlAnalysisStorage methodsFor: 'actions' stamp: 'M.U 1/4/2000 23:05'!remove: aDlAnalyzable 	| modelElemCol removed matchCol |	modelElemCol := self rootDict at: aDlAnalyzable key ifAbsent: [^ nil].	removed := modelElemCol remove: aDlAnalyzable ifAbsent: [].	removed isNil ifFalse: [self isElementPut: true].	matchCol := self matchDict at: aDlAnalyzable majorHash ifAbsent: [].	matchCol isNil ifFalse: [matchCol remove: aDlAnalyzable ifAbsent: []].	^ removed.! !!DlAnalysisStorage methodsFor: 'actions' stamp: 'M.U 12/25/1999 23:46'!select: aBlock 	| selected |	selected := self createModelElemCollection.	self rootDict do: [:each | selected addAll: (each select: aBlock)].	^selected! !!DlAnalysisStorage methodsFor: 'actions' stamp: 'MU 3/21/1999 00:46'!values	^self rootDict values! !!DlAnalysisStorage methodsFor: 'actions-raw' stamp: 'M.U 10/17/1999 16:24'!at: aSpecifier 	| ret |	ret := self rootDict at: aSpecifier ifAbsentPut: [self createModelElemCollection].	^ret ! !!DlAnalysisStorage methodsFor: 'actions-raw' stamp: 'M.U 10/17/1999 16:50'!at: aSpecifier put: aMetaModelElem	| modelElemCol |	modelElemCol := self rootDict at: aSpecifier ifAbsentPut: [self createModelElemCollection].	modelElemCol add: aMetaModelElem.	self isElementPut: true! !!DlAnalysisStorage methodsFor: 'actions-raw' stamp: 'M.U 10/17/1999 16:24'!at: aSpecifier putAll: aCollectionOfMetaModelElem	aCollectionOfMetaModelElem do: [:each | self at: aSpecifier put: each]	! !!DlAnalysisStorage methodsFor: 'getting-analyzable-all' stamp: 'M.U 10/17/1999 17:29'!getAllAnalyzables	self isElementPut ifTrue: [self allElements: nil].	self isElementPut: false.	^ self allElements.! !!DlAnalysisStorage methodsFor: 'getting-analyzable-all' stamp: 'MU 2/6/2000 16:20'!getAllChangeSets	^self privGetAllElementsOf: self changeSetKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable-all' stamp: 'MU 2/6/2000 16:21'!getAllClassCategories		^self privGetAllElementsOf: self classCategoryKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable-all' stamp: 'MU 2/6/2000 16:22'!getAllClassInstVariables		^self privGetAllElementsOf: self classInstVariableKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable-all' stamp: 'MU 2/6/2000 16:22'!getAllClassMethodCategories		^self privGetAllElementsOf: self classMethodCategoryKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable-all' stamp: 'MU 2/6/2000 16:22'!getAllClassMethods		^self privGetAllElementsOf: self classMethodKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable-all' stamp: 'MU 2/6/2000 16:22'!getAllClassVariables		^self privGetAllElementsOf: self classVariableKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable-all' stamp: 'MU 2/6/2000 16:23'!getAllClasses	^self privGetAllElementsOf: self classKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable-all' stamp: 'MU 2/6/2000 16:23'!getAllGlobalRoots		^self privGetAllElementsOf: self globalRootKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable-all' stamp: 'MU 2/6/2000 16:23'!getAllGlobalVariables		^self privGetAllElementsOf: self globalVariableKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable-all' stamp: 'MU 2/6/2000 16:24'!getAllInstMethodCategories		^self privGetAllElementsOf: self instMethodCategoryKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable-all' stamp: 'MU 2/6/2000 16:24'!getAllInstMethods		^self privGetAllElementsOf: self instMethodKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable-all' stamp: 'MU 2/6/2000 16:24'!getAllInstVariables		^self privGetAllElementsOf: self instVariableKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable-all' stamp: 'MU 2/6/2000 16:25'!getAllLocalScopeVariables	^self privGetAllElementsOf: self localScopeVariableKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable-all' stamp: 'MU 2/6/2000 16:25'!getAllMethodCategories	^self privGetAllElementsOf: self methodCategoryKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable-all' stamp: 'MU 2/6/2000 16:26'!getAllMethods		^self privGetAllElementsOf: self methodKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable-all' stamp: 'MU 2/6/2000 16:26'!getAllPoolVariables		^self privGetAllElementsOf: self poolVariableKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable-all' stamp: 'MU 2/6/2000 16:27'!getAllPools		^self privGetAllElementsOf: self poolKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable' stamp: 'MU 2/6/2000 16:15'!getChangeSets	^self at: self changeSetKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable' stamp: 'MU 1/5/1999 22:39'!getClassCategories	^self at: self classCategoryKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable' stamp: 'MU 1/5/1999 22:39'!getClassInstVariables	^self at: self classInstVariableKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable' stamp: 'MU 1/5/1999 22:40'!getClassMethodCategories	^self at: self classMethodCategoryKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable' stamp: 'MU 1/5/1999 22:40'!getClassMethods	^self at: self classMethodKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable' stamp: 'MU 1/5/1999 22:40'!getClassVariables	^self at: self classVariableKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable' stamp: 'MU 1/5/1999 22:40'!getClasses	^self at: self classKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable' stamp: 'mu 11/26/2003 02:53'!getDeclarativePools	^self at: self declarativePoolKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable' stamp: 'M.U 12/27/1999 00:20'!getGlobalRoots	^self at: self globalRootKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable' stamp: 'M.U 4/29/1999 19:10'!getGlobalVariables	^self at: self globalVariableKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable' stamp: 'MU 1/5/1999 22:40'!getInstMethodCategories	^self at: self instMethodCategoryKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable' stamp: 'MU 1/5/1999 22:40'!getInstMethods	^self at: self instMethodKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable' stamp: 'MU 1/5/1999 22:40'!getInstVariables	^self at: self instVariableKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable' stamp: 'M.U. 10/3/1999 02:16'!getLocalScopeVariables	| ret iVars cVars ciVars |	ret := self at: self localScopeVariableKey.	^ ret isEmpty		ifTrue: 			[iVars := self at: self instVariableKey.			cVars := self at: self classVariableKey.			ciVars := self at: self classInstVariableKey.			iVars isEmpty				ifTrue: [cVars isEmpty						ifTrue: [ciVars]						ifFalse: [(cVars addAll: ciVars) yourself]]				ifFalse: [(iVars addAll: cVars) yourself addAll: ciVars]]		ifFalse: [ret]! !!DlAnalysisStorage methodsFor: 'getting-analyzable' stamp: 'M.U. 10/3/1999 02:15'!getMethodCategories	| ret iMethodCats cMethodCats |	ret := self at: self methodCategoryKey.	^ ret isEmpty		ifTrue: 			[iMethodCats := self at: self instMethodCategoryKey.			cMethodCats := self at: self classMethodCategoryKey.			iMethodCats isEmpty				ifTrue: [cMethodCats]				ifFalse: 					[iMethodCats addAll: cMethodCats.					iMethodCats]]		ifFalse: [ret]! !!DlAnalysisStorage methodsFor: 'getting-analyzable' stamp: 'M.U. 10/3/1999 02:15'!getMethods	| ret iMethods cMethods |	ret := self at: self methodKey.	^ ret isEmpty		ifTrue: 			[iMethods := self at: self instMethodKey.			cMethods := self at: self classMethodKey.			iMethods isEmpty				ifTrue: [cMethods]				ifFalse: 					[iMethods addAll: cMethods.					iMethods]]		ifFalse: [ret]! !!DlAnalysisStorage methodsFor: 'getting-analyzable' stamp: 'mu 11/26/2003 02:50'!getPoolDictionaries	^self at: self poolDictionaryKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable' stamp: 'M.U 4/29/1999 19:11'!getPoolVariables	^self at: self poolVariableKey! !!DlAnalysisStorage methodsFor: 'getting-analyzable' stamp: 'mu 11/26/2003 02:53'!getPools	| ret poolDicts decPools |	ret := self at: self poolKey.	^ ret isEmpty		ifTrue: [poolDicts := self at: self poolDictionaryKey.			decPools := self at: self declarativePoolKey.			poolDicts , decPools]		ifFalse: [ret]! !!DlAnalysisStorage methodsFor: 'getting-analyzable-minor' stamp: 'MU 2/6/2000 16:15'!getChangeSets: minorKey	^self at: (self self changeSetKey copyWithMinorKey: minorKey)! !!DlAnalysisStorage methodsFor: 'getting-analyzable-minor' stamp: 'M.U 12/11/1999 19:52'!getClassCategories: minorKey	^self at: (self classCategoryKey copyWithMinorKey: minorKey)! !!DlAnalysisStorage methodsFor: 'getting-analyzable-minor' stamp: 'M.U 12/11/1999 19:53'!getClassInstVariables: minorKey	^self at: (self classInstVariableKey copyWithMinorKey: minorKey)! !!DlAnalysisStorage methodsFor: 'getting-analyzable-minor' stamp: 'M.U 12/11/1999 19:53'!getClassMethodCategories: minorKey	^self at: (self classMethodCategoryKey copyWithMinorKey: minorKey)! !!DlAnalysisStorage methodsFor: 'getting-analyzable-minor' stamp: 'M.U 12/11/1999 19:53'!getClassMethods: minorKey	^self at: (self classMethodKey copyWithMinorKey: minorKey)! !!DlAnalysisStorage methodsFor: 'getting-analyzable-minor' stamp: 'M.U 12/11/1999 19:53'!getClassVariables: minorKey	^self at: (self classVariableKey copyWithMinorKey: minorKey)! !!DlAnalysisStorage methodsFor: 'getting-analyzable-minor' stamp: 'M.U 12/11/1999 19:53'!getClasses: minorKey	^self at: (self classKey copyWithMinorKey: minorKey)! !!DlAnalysisStorage methodsFor: 'getting-analyzable-minor' stamp: 'M.U 12/27/1999 00:20'!getGlobalRoots: minorKey	^self at: (self globalRootKey copyWithMinorKey: minorKey)! !!DlAnalysisStorage methodsFor: 'getting-analyzable-minor' stamp: 'M.U 12/11/1999 19:53'!getGlobalVariables: minorKey	^self at: (self globalVariableKey copyWithMinorKey: minorKey)! !!DlAnalysisStorage methodsFor: 'getting-analyzable-minor' stamp: 'M.U 12/11/1999 19:53'!getInstMethodCategories: minorKey	^self at: (self instMethodCategoryKey copyWithMinorKey: minorKey)! !!DlAnalysisStorage methodsFor: 'getting-analyzable-minor' stamp: 'M.U 12/11/1999 19:53'!getInstMethods: minorKey	^self at: (self instMethodKey copyWithMinorKey: minorKey)! !!DlAnalysisStorage methodsFor: 'getting-analyzable-minor' stamp: 'M.U 12/11/1999 19:53'!getInstVariables: minorKey	^self at: (self instVariableKey copyWithMinorKey: minorKey)! !!DlAnalysisStorage methodsFor: 'getting-analyzable-minor' stamp: 'M.U 12/11/1999 19:54'!getLocalScopeVariables: minorKey	| ret iVars cVars ciVars |	ret := self at: (self localScopeVariableKey copyWithMinorKey: minorKey).	^ ret isEmpty		ifTrue: 			[iVars := self at: self instVariableKey copyWithMinorKey: minorKey.			cVars := self at: self classVariableKey copyWithMinorKey: minorKey.			ciVars := self at: self classInstVariableKey copyWithMinorKey: minorKey.			iVars isEmpty				ifTrue: [cVars isEmpty						ifTrue: [ciVars]						ifFalse: [(cVars addAll: ciVars) yourself]]				ifFalse: [(iVars addAll: cVars) yourself addAll: ciVars]]		ifFalse: [ret]! !!DlAnalysisStorage methodsFor: 'getting-analyzable-minor' stamp: 'M.U 12/11/1999 19:54'!getMethodCategories: minorKey	| ret iMethodCats cMethodCats |	ret := self at: (self methodCategoryKey copyWithMinorKey: minorKey).	^ ret isEmpty		ifTrue: 			[iMethodCats := self at: self instMethodCategoryKey copyWithMinorKey: minorKey.			cMethodCats := self at: self classMethodCategoryKey copyWithMinorKey: minorKey.			iMethodCats isEmpty				ifTrue: [cMethodCats]				ifFalse: 					[iMethodCats addAll: cMethodCats.					iMethodCats]]		ifFalse: [ret]! !!DlAnalysisStorage methodsFor: 'getting-analyzable-minor' stamp: 'M.U 10/17/1999 17:11'!getMethods: minorKey	| ret iMethods cMethods |	ret := self at: (self methodKey copyWithMinorKey: minorKey).	^ ret isEmpty		ifTrue: 			[iMethods := self at: (self instMethodKey copyWithMinorKey: minorKey).			cMethods := self at: (self classMethodKey copyWithMinorKey: minorKey).			iMethods isEmpty				ifTrue: [cMethods]				ifFalse: 					[iMethods addAll: cMethods.					iMethods]]		ifFalse: [ret]! !!DlAnalysisStorage methodsFor: 'getting-analyzable-minor' stamp: 'M.U 12/11/1999 19:54'!getPoolVariables: minorKey	^self at: (self poolVariableKey copyWithMinorKey: minorKey)! !!DlAnalysisStorage methodsFor: 'getting-analyzable-minor' stamp: 'M.U 12/11/1999 19:54'!getPools: minorKey	^self at: (self poolKey copyWithMinorKey: minorKey)! !!DlAnalysisStorage methodsFor: 'constants' stamp: 'MU 2/6/2000 16:14'!changeSetKey	^DlAnalyzableChangeSet typeKey! !!DlAnalysisStorage methodsFor: 'constants' stamp: 'MU 2/21/1999 00:31'!classCategoryKey	^DlAnalyzableClassCategory typeKey! !!DlAnalysisStorage methodsFor: 'constants' stamp: 'MU 2/21/1999 00:31'!classInstVariableKey	^DlAnalyzableClassInstVariable typeKey! !!DlAnalysisStorage methodsFor: 'constants' stamp: 'MU 2/21/1999 00:32'!classKey	^DlAnalyzableClass typeKey! !!DlAnalysisStorage methodsFor: 'constants' stamp: 'MU 2/21/1999 00:32'!classMethodCategoryKey	^DlAnalyzableClassMethodCategory typeKey! !!DlAnalysisStorage methodsFor: 'constants' stamp: 'MU 2/21/1999 00:32'!classMethodKey	^DlAnalyzableClassMethod typeKey! !!DlAnalysisStorage methodsFor: 'constants' stamp: 'MU 2/21/1999 00:32'!classVariableKey	^DlAnalyzableClassVariable typeKey! !!DlAnalysisStorage methodsFor: 'constants' stamp: 'mu 11/26/2003 02:25'!declarativePoolKey	^DlAnalyzableDeclarativePool typeKey! !!DlAnalysisStorage methodsFor: 'constants' stamp: 'M.U 12/27/1999 00:19'!globalRootKey	^DlAnalyzableGlobalRoot typeKey! !!DlAnalysisStorage methodsFor: 'constants' stamp: 'M.U 4/29/1999 19:09'!globalVariableKey	^DlAnalyzableGlobalVariable typeKey! !!DlAnalysisStorage methodsFor: 'constants' stamp: 'MU 2/21/1999 00:32'!instMethodCategoryKey	^DlAnalyzableInstMethodCategory typeKey! !!DlAnalysisStorage methodsFor: 'constants' stamp: 'MU 2/21/1999 00:32'!instMethodKey	^DlAnalyzableInstMethod typeKey! !!DlAnalysisStorage methodsFor: 'constants' stamp: 'MU 2/21/1999 00:32'!instVariableKey	^DlAnalyzableInstVariable typeKey! !!DlAnalysisStorage methodsFor: 'constants' stamp: 'M.U. 8/25/1999 23:33'!localScopeVariableKey	^DlAnalyzableLocalScopeVariable typeKey! !!DlAnalysisStorage methodsFor: 'constants' stamp: 'MU 2/21/1999 00:32'!methodCategoryKey	^DlAnalyzableMethodCategory typeKey! !!DlAnalysisStorage methodsFor: 'constants' stamp: 'MU 2/21/1999 00:31'!methodKey	^DlAnalyzableMethod typeKey! !!DlAnalysisStorage methodsFor: 'constants' stamp: 'mu 11/26/2003 02:59'!poolDictionaryKey	^DlAnalyzablePoolDictionary typeKey! !!DlAnalysisStorage methodsFor: 'constants' stamp: 'M.U 4/29/1999 19:09'!poolKey	^DlAnalyzablePool typeKey! !!DlAnalysisStorage methodsFor: 'constants' stamp: 'M.U 4/29/1999 19:09'!poolVariableKey	^DlAnalyzablePoolVariable typeKey! !!DlAnalysisStorage methodsFor: 'accessing' stamp: 'MU 3/21/1999 01:07'!allElements	allElements isNil ifTrue:[ allElements := self prepareAllElements].	^allElements! !!DlAnalysisStorage methodsFor: 'accessing' stamp: 'MU 3/21/1999 00:43'!allElements: aValue	allElements := aValue! !!DlAnalysisStorage methodsFor: 'accessing' stamp: 'M.U 10/17/1999 16:49'!isElementPut	^isElementPut! !!DlAnalysisStorage methodsFor: 'accessing' stamp: 'M.U 10/17/1999 16:49'!isElementPut: aValue	isElementPut := aValue! !!DlAnalysisStorage methodsFor: 'accessing' stamp: 'M.U 1/4/2000 22:26'!matchDict	^matchDict! !!DlAnalysisStorage methodsFor: 'accessing' stamp: 'M.U 1/4/2000 22:26'!matchDict: aValue	matchDict := aValue! !!DlAnalysisStorage methodsFor: 'accessing' stamp: 'MU 12/30/1998 20:23'!rootDict	^rootDict! !!DlAnalysisStorage methodsFor: 'accessing' stamp: 'MU 12/30/1998 20:23'!rootDict: aValue	rootDict := aValue! !!DlAnalysisStorage methodsFor: 'private' stamp: 'M.U. 10/2/1999 23:45'!prepareAllElements	| so |	so := self createModelElemCollection.	self do:[:each | so add: each].	^so	! !!DlAnalysisStorage methodsFor: 'private' stamp: 'MU 2/6/2000 16:19'!privGetAllElementsOf: aDlKey	| col |	col := self createModelElemCollection.	(self keys select: [:each | each majorEquals: aDlKey])		do: [:eachKey | col addAll: (self at: eachKey)].	^ col.! !!DlAnalysisStorage methodsFor: 'factory' stamp: 'M.U 1/4/2000 23:22'!createMatchElemCollection	^DlSortedSet new: 1.	! !!DlAnalysisStorage methodsFor: 'factory' stamp: 'M.U 5/5/1999 01:50'!createModelElemCollection	^DlSortedSet new! !!DlAnalysisStorage methodsFor: 'factory' stamp: 'M.U 1/4/2000 22:25'!createModelElemDictionary	^IdentityDictionary new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlAnalysisStorage class	instanceVariableNames: ''!!DlAnalysisStorage class methodsFor: 'instance creation' stamp: 'M.U 4/24/1999 00:29'!default	^ DlDefaultInstanceFactory default createInstanceOf: self! !!DlAnalysisStorage class methodsFor: 'instance creation' stamp: 'MU 1/5/1999 23:42'!global	^self default! !!DlAnalysisStorage class methodsFor: 'instance creation' stamp: 'M.U 4/24/1999 00:33'!new	^super new initialize! !