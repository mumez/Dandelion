DlDynamicDocument subclass: #DlDandelionCssDoc	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-dynDoc-html'!!DlDandelionCssDoc commentStamp: '<historical>' prior: 0!I represent a CSS page for Dandelion htmls.Default CSS elements are hard-coded. However, since I am a subclass of DlDynamicDocument, you can change CSS elements using #update:named:.#creator[:masashi | ^umezawa] #version 0.1 M.U!!DlDandelionCssDoc methodsFor: 'building contents' stamp: 'MU 2/28/2000 00:15'!buildContents	self add: self tagStyleString named: #tags.	self add: self classStyleString named: #classes.	self add: self changeSetStyleString named: #changeSet.! !!DlDandelionCssDoc methodsFor: 'private' stamp: 'MU 7/9/2000 00:28'!changeSetStyleString	^ '.add{font-weight : bold;color : navy;}.change{font-style : italic;color : green;}.remove{color : red;  text-decoration : line-through;}.addedThenRemoved{color : brown;  text-decoration : line-through;}.new{font-weight : bold;color : navy;}.onlyChange{font-style : italic;color : green;}'! !!DlDandelionCssDoc methodsFor: 'private' stamp: 'MU 2/28/2000 00:13'!classStyleString	^ '.highlight{  background-color : #FF9966;}.normal{  background-color : white;}.shade{  background-color : #EEEEEE;}'! !!DlDandelionCssDoc methodsFor: 'private' stamp: 'mu 11/23/2004 01:33'!tagStyleString	^ 'BODY{margin-top : 5%;margin-left : 5%;margin-right : 5%;margin-bottom : 5%;width : auto;height : auto;	background-color : #fdfeda;}H1{color : olive;font-size : x-large;text-align : center;}H2{color : red;font-size : large;  margin-left : 5%;}H3{color : navy;font-size : medium;  margin-left : 10%;}P{background-color : #fafafa;}PRE{overflow : auto;}A:HOVER{  color: #663300;  text-decoration: underline;  font-style : italic;}'! !DlDynamicDocument subclass: #DlDandelionHtmlDoc	instanceVariableNames: 'analysisStorage styleSheetLocation'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-dynDoc-html'!!DlDandelionHtmlDoc commentStamp: '<historical>' prior: 0!I am an abstract class representing HTML documents (for dandelion output).#creator[:masashi | ^umezawa] #version 0.1 M.U!!DlDandelionHtmlDoc methodsFor: 'initialize-release' stamp: 'M.U 1/16/2000 23:52'!initForBuild	| props |	props := self properties.	self generator: props generatorTitle.	self styleSheetLocation: props styleSheetDirectoryName, '/', props styleSheetName.	! !!DlDandelionHtmlDoc methodsFor: 'building contents' stamp: 'M.U 12/26/1999 00:29'!buildContents	self buildHeader.	self buildMainContents.	self buildFooter.! !!DlDandelionHtmlDoc methodsFor: 'building contents' stamp: 'MU 3/19/2000 02:09'!buildFooter	| props str |	props := self properties.	str := self createBuildStream.	str p.	str tagAlignRight.	str anchorRef: '#', props topTitle with: props topTitle.	str pEnd.	str hr.	str address.	str anchorRef: props addressURL with: props addressTitle.	str addressEnd.	str bodyEnd.	str htmlEnd.	str endEntry.	self add: str named: #footer.! !!DlDandelionHtmlDoc methodsFor: 'building contents' stamp: 'mu 1/3/2001 22:23'!buildHeader	| props str |	str := self createBuildStream.	props := self properties.	str declareHtml4.	str commentWith: props creatorComment, ' ', Time dateAndTimeNow printString.	str html.	str head.	str titleWith: self title.	str metaName: 'GENERATOR '  content: self generator, ' (', self class name, ')'.	str linkStylesheet: self styleSheetLocation.	str headEnd.	str body.	str anchorName: props topTitle with: ''.	str endEntry.	self add: str named: #header.	! !!DlDandelionHtmlDoc methodsFor: 'building contents' stamp: 'M.U 12/25/1999 22:12'!buildMainContents	"default do nothing"! !!DlDandelionHtmlDoc methodsFor: 'factory' stamp: 'M.U 12/26/1999 01:33'!createBuildStream	"just a short cut"	self buildStream: (self defaultHtmlStreamClass on: self privInitialStringForStream).	^ self buildStream.! !!DlDandelionHtmlDoc methodsFor: 'factory' stamp: 'M.U 12/25/1999 01:34'!defaultHtmlStreamClass	^DlHtmlWriteStream! !!DlDandelionHtmlDoc methodsFor: 'private' stamp: 'MU 3/25/2000 19:15'!contract: aString	^aString contractTo: FileDirectory default maxFileNameLength! !!DlDandelionHtmlDoc methodsFor: 'private' stamp: 'MU 3/25/2000 19:08'!isInMac	^ FileDirectory default class == MacFileDirectory! !!DlDandelionHtmlDoc methodsFor: 'private' stamp: 'M.U 12/25/1999 02:55'!privInitialStringForStream	"maybe big stream will be created"	^String new: 256	! !!DlDandelionHtmlDoc methodsFor: 'private' stamp: 'MU 3/10/2000 23:15'!writeInstanceClassTableUsing: aBlock	| str props |	str := self buildStream.	props := self properties.	self writeTableBegin.	str tr.	str tagClass: props highlightName.	str th.	str boldWith: props instanceTitle.	str thEnd.	str th.	str boldWith: props classTitle.	str thEnd.	str tr.	str tagClass: props normalName.	aBlock value.	str tableEnd.! !!DlDandelionHtmlDoc methodsFor: 'private' stamp: 'M.U 12/30/1999 19:29'!writeTableBegin	| str |	str := self buildStream.	str tableBorder: '1' width: '100%' cellspacing: '0' cellpadding: '3'.! !!DlDandelionHtmlDoc methodsFor: 'accessing' stamp: 'M.U 12/25/1999 23:02'!analysisStorage	^analysisStorage! !!DlDandelionHtmlDoc methodsFor: 'accessing' stamp: 'M.U 12/25/1999 23:02'!analysisStorage: aValue	analysisStorage := aValue! !!DlDandelionHtmlDoc methodsFor: 'accessing' stamp: 'M.U 1/16/2000 23:50'!styleSheetLocation	^styleSheetLocation! !!DlDandelionHtmlDoc methodsFor: 'accessing' stamp: 'M.U 1/16/2000 23:50'!styleSheetLocation: aValue	styleSheetLocation := aValue! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlDandelionHtmlDoc class	instanceVariableNames: ''!!DlDandelionHtmlDoc class methodsFor: 'property' stamp: 'MU 3/16/2000 01:24'!defaultProperties	^DlHtmlOutputProperties new! !DlDandelionHtmlDoc subclass: #DlAllClassCategoryIndexHtmlDoc	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-dynDoc-html'!!DlAllClassCategoryIndexHtmlDoc commentStamp: 'mu 5/21/2003 11:52' prior: 0!I represent a AllClassCategory html page.#creator[:masashi | ^umezawa] #version 0.2 M.U!!DlAllClassCategoryIndexHtmlDoc methodsFor: 'initialize-release' stamp: 'M.U 12/25/1999 23:16'!initForBuild	| props |	super initForBuild.	props := self properties.	self title: props systemTitle, ' ', props allClassCategoryIndexTitle.! !!DlAllClassCategoryIndexHtmlDoc methodsFor: 'building contents' stamp: 'MU 5/20/2003 00:45'!buildMainContents	| props str tgt nm |	props := self properties.	tgt := props subMenuFrameName.	str := self createBuildStream.	str p.	str center.	str boldWith: props systemTitle.	str anchorRef: props overviewName, props htmlSuffix target: props mainFrameName with: props overviewTitle.	str br.	str anchorRef: props wholeIndexDirectoryName, '/', props wholeIndexName, props htmlSuffix target: props mainFrameName with: props wholeIndexTitle.	str centerEnd.	str hr.	str anchorRef: props allClassIndexName, props htmlSuffix target: tgt with: props allClassIndexTitle.	str hr.	str boldWith: props allClassCategoryIndexTitle.	str p.	str ul.	self analysisStorage getClassCategories do:[ :each |		str li.		nm := each name.		str anchorRef: ((self fixName: nm), '/', props classCategorySummaryName, props htmlSuffix) target: tgt with: nm.	].	str ulEnd.	str endEntry.	self add: str named: #main.	! !DlDandelionHtmlDoc subclass: #DlAllClassIndexHtmlDoc	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-dynDoc-html'!!DlAllClassIndexHtmlDoc commentStamp: 'mu 5/21/2003 11:52' prior: 0!I represent a AllClasses html page.#creator[:masashi | ^umezawa] #version 0.2 M.U!!DlAllClassIndexHtmlDoc methodsFor: 'initialize-release' stamp: 'M.U 12/25/1999 23:28'!initForBuild	| props |	super initForBuild.	props := self properties.	self title: props systemTitle, ' ', props allClassIndexTitle.! !!DlAllClassIndexHtmlDoc methodsFor: 'building contents' stamp: 'MU 5/20/2003 00:32'!buildMainContents	| props str tgt |	props := self properties.	tgt := props mainFrameName.	str := self createBuildStream.	str boldWith: props allClassIndexTitle.	str p.	str ul.	self analysisStorage getAllClasses do: 		[:each | 		| cat | 		str li.		cat := each category.		cat isNil			ifTrue: 				[str spanClass: each minorKey.				str nextPutAll: each name.				str spanEnd]			ifFalse: [str					anchorRef: (self fixName: cat name) , '/' , each name , props htmlSuffix					class: each minorKey					target: tgt					with: each name]].	str ulEnd.	str endEntry.	self add: str named: #main! !DlDandelionHtmlDoc subclass: #DlChangeSetHtmlDoc	instanceVariableNames: 'changeSet'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-dynDoc-html'!!DlChangeSetHtmlDoc commentStamp: '<historical>' prior: 0!I represent an abstract html page which shows changeSet. #creator[:masashi | ^umezawa] #version 0.1 M.U 2/10/2000 20:51!!DlChangeSetHtmlDoc methodsFor: 'initialize-release' stamp: 'MU 3/5/2000 00:31'!initForBuild	super initForBuild.	self title: self changeSet name.	! !!DlChangeSetHtmlDoc methodsFor: 'accessing' stamp: 'M.U 1/25/2000 01:10'!changeSet	^changeSet! !!DlChangeSetHtmlDoc methodsFor: 'accessing' stamp: 'M.U 1/25/2000 01:10'!changeSet: aValue	changeSet := aValue! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlChangeSetHtmlDoc class	instanceVariableNames: ''!!DlChangeSetHtmlDoc class methodsFor: 'property' stamp: 'MU 3/16/2000 01:21'!defaultProperties	^DlChangeSetHtmlOutputProperties new! !DlChangeSetHtmlDoc subclass: #DlChangeSetClassesHtmlDoc	instanceVariableNames: 'classes'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-dynDoc-html'!!DlChangeSetClassesHtmlDoc commentStamp: '<historical>' prior: 0!I represent a changed class list page. (#added #changed #removed #addedThenRemoved)#creator[:masashi | ^umezawa] #version 0.2 M.U!!DlChangeSetClassesHtmlDoc methodsFor: 'initialize-release' stamp: 'MU 3/5/2000 00:29'!initForBuild	super initForBuild.	self title: self changeSet name.	self styleSheetLocation: '../', self styleSheetLocation.! !!DlChangeSetClassesHtmlDoc methodsFor: 'building contents' stamp: 'MU 3/11/2000 00:36'!buildMainContents	| props str |	props := self properties.	str := self createBuildStream.	str p.	str center.	str h1With: self changeSet name , ' : ' , self kind.	str centerEnd.	str hr.	str p.	self writeTableBegin.	str tr.	str tagClass: props highlightName.	str th.	str boldWith: self kind.	str thEnd.	str th.	str boldWith: props classCategoryTitle.	str thEnd.	self writeClassLinks.	str tableEnd.	str endEntry.	self add: str named: #main.! !!DlChangeSetClassesHtmlDoc methodsFor: 'accessing' stamp: 'MU 2/20/2000 00:48'!classes	^classes! !!DlChangeSetClassesHtmlDoc methodsFor: 'accessing' stamp: 'MU 2/20/2000 00:48'!classes: aValue	classes := aValue! !!DlChangeSetClassesHtmlDoc methodsFor: 'private' stamp: 'MU 5/20/2003 00:33'!writeClassLinks	| props str |	props := self properties.	str := self buildStream.	self classes do: 		[:each | | nm catNm |		str tr.		str tagClass: props normalName.		nm := each name.		catNm := self fixName: each category name.		str td.		(each minorKey == #remove or:[each minorKey == #addedThenRemoved])			ifTrue: 				[str spanClass: each minorKey.				str nextPutAll: each name.				str spanEnd]			ifFalse: [str					anchorRef: '../' , catNm , '/' , each name , props htmlSuffix					class: each minorKey					target: props mainFrameName					with: nm].		str tdEnd.		str td.		(each minorKey == #remove or:[each minorKey == #addedThenRemoved])			ifTrue: [str nextPutAll: props noneTitle]			ifFalse: [str					anchorRef: '../' , catNm , '/' , props classCategorySummaryName , props htmlSuffix					target: props subMenuFrameName					with: catNm].		str tdEnd.		str trEnd].! !DlChangeSetHtmlDoc subclass: #DlChangeSetMethodsHtmlDoc	instanceVariableNames: 'methods'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-dynDoc-html'!!DlChangeSetMethodsHtmlDoc commentStamp: 'mu 5/21/2003 11:53' prior: 0!I represent a changed method list page. (#added #changed #removed #addedThenRemoved )#creator[:masashi | ^umezawa] #version 0.2 M.U !!DlChangeSetMethodsHtmlDoc methodsFor: 'initialize-release' stamp: 'MU 3/5/2000 00:29'!initForBuild	super initForBuild.	self title: self changeSet name.	self styleSheetLocation: '../', self styleSheetLocation.! !!DlChangeSetMethodsHtmlDoc methodsFor: 'building contents' stamp: 'MU 3/11/2000 01:05'!buildMainContents	| props str |	props := self properties.	str := self createBuildStream.	str p.	str center.	str h1With: self changeSet name, ' : ', self kind.	str centerEnd.	str hr.	str p.	self writeTableBegin.			str tr.			str tagClass: props highlightName.			str th.			str boldWith: self kind.			str thEnd.			str th.			str boldWith: props classTitle.			str thEnd.			self writeMethodLinks.			str tableEnd.	str endEntry.	self add: str named: #main.! !!DlChangeSetMethodsHtmlDoc methodsFor: 'accessing' stamp: 'MU 2/20/2000 01:52'!methods	^methods! !!DlChangeSetMethodsHtmlDoc methodsFor: 'accessing' stamp: 'MU 2/20/2000 01:52'!methods: aValue	methods := aValue! !!DlChangeSetMethodsHtmlDoc methodsFor: 'private' stamp: 'MU 5/20/2003 00:33'!writeMethodLinks	| tgt props str |	props := self properties.	str := self buildStream.	tgt := props mainFrameName.	self methods do: 		[:each | | cCatNm clsNm | 		cCatNm := self fixName: each klass category name.		clsNm := each klass name.		str tr.		str tagClass: props normalName.		str td.		str			anchorRef: '../' , cCatNm , '/' , clsNm , props htmlSuffix , '#' , each description , ' ' , each name			class: each minorKey			target: tgt			with: each name.		str tdEnd.		str td.		str			anchorRef: '../' , cCatNm , '/' , clsNm , props htmlSuffix			target: tgt			with: clsNm.		str tdEnd.		str trEnd].! !DlChangeSetHtmlDoc subclass: #DlChangeSetOverviewHtmlDoc	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-dynDoc-html'!!DlChangeSetOverviewHtmlDoc commentStamp: '<historical>' prior: 0!I represent a changeSet overview page. #creator[:masashi | ^umezawa] #version 0.1 M.U 2/10/2000 20:51!!DlChangeSetOverviewHtmlDoc methodsFor: 'initialize-release' stamp: 'MU 3/5/2000 00:30'!initForBuild	super initForBuild.	self title: self changeSet name.	! !!DlChangeSetOverviewHtmlDoc methodsFor: 'building contents' stamp: 'mu 1/3/2001 01:51'!buildClassLinks	| str tgt props |	str := self createBuildStream.	props := self properties.	str h2With: props classesTitle, ':'.	str p.	tgt := props mainFrameName.	self changeSet addedClasses isEmpty ifFalse:[	str h3.	str anchorRef: (self classAnchorStringFrom: props addedName) target: tgt with: props addedName, ' ', props classesTitle.	str h3End.	].	self changeSet changedClasses isEmpty ifFalse:[	str h3.	str anchorRef: (self classAnchorStringFrom: props changedName) target: tgt with: (props changedName, ' ', props classesTitle).	str h3End.	].	self changeSet removedClasses isEmpty ifFalse:[	str h3.	str anchorRef: (self classAnchorStringFrom: props removedName) target: tgt with: (props removedName, ' ', props classesTitle).	str h3End.	].	self changeSet addedThenRemovedClasses isEmpty ifFalse:[	str h3.	str anchorRef: (self classAnchorStringFrom: props addedThenRemovedName) target: tgt with: (props addedThenRemovedName, ' ', props classesTitle).	str h3End.	].	str endEntry.	self add: str named: #classLinks.	! !!DlChangeSetOverviewHtmlDoc methodsFor: 'building contents' stamp: 'MU 2/20/2000 00:08'!buildMainContents	self buildMainHeader.	self buildPreamble.	self buildClassLinks.	self buildMethodLinks.	self buildPostscript.		! !!DlChangeSetOverviewHtmlDoc methodsFor: 'building contents' stamp: 'MU 2/6/2000 17:03'!buildMainHeader	| str  |	str := self createBuildStream.	str p.	str center.	str h1With: self changeSet name.	str centerEnd.	str hr.	str endEntry.	self add: str named: #mainHeader.	! !!DlChangeSetOverviewHtmlDoc methodsFor: 'building contents' stamp: 'MU 3/11/2000 00:54'!buildMethodLinks	| str props |	str := self createBuildStream.	props := self properties.	str h2With: props methodsTitle , ':'.	str p.	self		writeInstanceClassTableUsing: 			[self writeInstMethodLinks.			self writeClassMethodLinks].	str hr.	str endEntry.	self add: str named: #methodLinks.! !!DlChangeSetOverviewHtmlDoc methodsFor: 'building contents' stamp: 'MU 3/11/2000 00:53'!buildPostscript	| str |	str := self createBuildStream.	str h2With: self properties postscriptTitle, ':'.	str p.	str pre.	str code.	str nextPutAll: self changeSet postscript.	str codeEnd.	str preEnd.	str endEntry.	self add: str named: #postscript.! !!DlChangeSetOverviewHtmlDoc methodsFor: 'building contents' stamp: 'MU 3/11/2000 00:53'!buildPreamble	| str |	str := self createBuildStream.	str h2With: self properties preambleTitle, ':'.	str p.	str pre.	str code.	str nextPutAll: self changeSet preamble.	str codeEnd.	str preEnd.	str hr.	str endEntry.	self add: str named: #preamble.! !!DlChangeSetOverviewHtmlDoc methodsFor: 'private' stamp: 'MU 3/25/2000 19:07'!classAnchorStringFrom: aString	| props str|	props := self properties.	str := props changeSetDirectoryName, '/', aString, props classesName, props htmlSuffix.	^str ! !!DlChangeSetOverviewHtmlDoc methodsFor: 'private' stamp: 'MU 3/11/2000 00:06'!writeClassMethodLinkRefKind: aKindString	| props |	props := self properties.	self writeMethodLinkRef: props classMethodsName title: props classMethodsTitle kind: aKindString! !!DlChangeSetOverviewHtmlDoc methodsFor: 'private' stamp: 'MU 3/11/2000 01:14'!writeClassMethodLinks	| str props |	str := self buildStream.	props := self properties.	str td.	str ul.	self changeSet addedClassMethods isEmpty ifFalse: [self writeClassMethodLinkRefKind: props addedName].	self changeSet changedClassMethods isEmpty ifFalse: [self writeClassMethodLinkRefKind: props changedName].	self changeSet removedClassMethods isEmpty ifFalse: [self writeClassMethodLinkRefKind: props removedName].	self changeSet addedThenRemovedClassMethods isEmpty ifFalse: [self writeClassMethodLinkRefKind: props addedThenRemovedName].	str ulEnd.	str tdEnd.! !!DlChangeSetOverviewHtmlDoc methodsFor: 'private' stamp: 'MU 3/11/2000 00:02'!writeInstMethodLinkRefKind: aKindString	| props |	props := self properties.	self writeMethodLinkRef: props instMethodsName title: props instanceMethodsTitle kind: aKindString! !!DlChangeSetOverviewHtmlDoc methodsFor: 'private' stamp: 'MU 3/11/2000 01:14'!writeInstMethodLinks	| str props |	str := self buildStream.	props := self properties.	str td.	str ul.	self changeSet addedInstMethods isEmpty ifFalse: [self writeInstMethodLinkRefKind: props addedName].	self changeSet changedInstMethods isEmpty ifFalse: [self writeInstMethodLinkRefKind: props changedName].	self changeSet removedInstMethods isEmpty ifFalse: [self writeInstMethodLinkRefKind: props removedName].	self changeSet addedThenRemovedInstMethods isEmpty ifFalse: [self writeInstMethodLinkRefKind: props addedThenRemovedName].	str ulEnd.	str tdEnd.! !!DlChangeSetOverviewHtmlDoc methodsFor: 'private' stamp: 'MU 3/11/2000 00:16'!writeMethodLinkRef: aFileString title: aTitleString kind: aKindString	| str props tgt |	str := self buildStream.	props := self properties.	tgt := props mainFrameName.	str li.	str		anchorRef: props changeSetDirectoryName, '/', aKindString , aFileString , props htmlSuffix		target: tgt		with: aKindString , ' ' , aTitleString.	! !DlDandelionHtmlDoc subclass: #DlClassCategoryHtmlDoc	instanceVariableNames: 'classCategory'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-dynDoc-html'!!DlClassCategoryHtmlDoc commentStamp: '<historical>' prior: 0!I represent an abstract page which shows class category information. #creator[:masashi | ^umezawa] #version 0.1 M.U!!DlClassCategoryHtmlDoc methodsFor: 'initialize-release' stamp: 'M.U 1/20/2000 18:52'!initForBuild	super initForBuild.	self styleSheetLocation: '../', self styleSheetLocation.! !!DlClassCategoryHtmlDoc methodsFor: 'accessing' stamp: 'M.U 12/26/1999 00:09'!classCategory	classCategory isNil ifTrue:[classCategory := ''].	^classCategory! !!DlClassCategoryHtmlDoc methodsFor: 'accessing' stamp: 'M.U 12/26/1999 00:03'!classCategory: aValue	classCategory := aValue! !DlClassCategoryHtmlDoc subclass: #DlClassCategoryDetailHtmlDoc	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-dynDoc-html'!!DlClassCategoryDetailHtmlDoc commentStamp: '<historical>' prior: 0!I represent a class category detail page. #creator[:masashi | ^umezawa] #version 0.1 M.U!!DlClassCategoryDetailHtmlDoc methodsFor: 'initialize-release' stamp: 'M.U 12/30/1999 19:34'!initForBuild	| props |	super initForBuild.	props := self properties.	self title: self classCategory name, ' ', props classCategoryDetailTitle.! !!DlClassCategoryDetailHtmlDoc methodsFor: 'building contents' stamp: 'mu 12/18/2000 02:16'!buildMainContents	| props str tgt nm cat |	cat := self classCategory.	props := self properties.	tgt := props mainFrameName.	str := self createBuildStream.	str p.	str center.	str h1With: cat name.	str centerEnd.	str hr.	str p.	cat isResolved		ifTrue: 			[self writeTableBegin.			str tr.			str tagClass: props highlightName.			str th.			str boldWith: cat name.			str thEnd.			str th.			str boldWith: props commentTitle.			str thEnd.			cat classes do: 				[:each | 				str tr.				str tagClass: props normalName.				str td.				nm := each name.				each isResolved					ifTrue: [str							anchorRef: nm , props htmlSuffix							target: tgt							with: nm]					ifFalse: [str nextPutAll: nm].				str tdEnd.				str td.				str pre.				str nextPutAll: each comment.				str preEnd.				str tdEnd.				str trEnd].			str tableEnd]		ifFalse: [props outputResolvedOnly ifFalse: [str italicWith: cat name]].	str endEntry.	self add: str named: #main.! !DlClassCategoryHtmlDoc subclass: #DlClassCategorySummaryHtmlDoc	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-dynDoc-html'!!DlClassCategorySummaryHtmlDoc commentStamp: '<historical>' prior: 0!I represent a class category summary page. #creator[:masashi | ^umezawa] #version 0.1 M.U!!DlClassCategorySummaryHtmlDoc methodsFor: 'initialize-release' stamp: 'M.U 1/20/2000 18:52'!initForBuild	super initForBuild.	self title: self classCategory name.	! !!DlClassCategorySummaryHtmlDoc methodsFor: 'building contents' stamp: 'mu 12/18/2000 02:16'!buildMainContents	| props str tgt nm cat |	cat := self classCategory.	props := self properties.	tgt := props mainFrameName.	str := self createBuildStream.	str p.	str center.	str boldWith: cat name.	str centerEnd.	str hr.	str		anchorRef: props classCategoryDetailName , props htmlSuffix		target: tgt		with: props classCategoryDetailTitle.	str hr.	str boldWith: props classesInTheCategoryTitle.	str p.	str ul.	cat isResolved		ifTrue: [cat classes do: 				[:each | 				str li.				nm := each name.				each isResolved					ifTrue: [str							anchorRef: nm , props htmlSuffix							class: each minorKey							target: tgt							with: nm]					ifFalse: [str nextPutAll: nm]]]		ifFalse: [props outputResolvedOnly ifFalse: [str italicWith: cat name]].	str ulEnd.	str endEntry.	self add: str named: #main.! !DlDandelionHtmlDoc subclass: #DlClassHtmlDoc	instanceVariableNames: 'klass'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-dynDoc-html'!!DlClassHtmlDoc commentStamp: 'mu 5/21/2003 11:53' prior: 0!I represent a class html page. #creator[:masashi | ^umezawa] #version 0.2 M.U!!DlClassHtmlDoc methodsFor: 'initialize-release' stamp: 'M.U 1/16/2000 23:55'!initForBuild	super initForBuild.	self title: self klass name.	self styleSheetLocation: '../', self styleSheetLocation.! !!DlClassHtmlDoc methodsFor: 'building contents' stamp: 'M.U 1/24/2000 01:32'!buildClassComment	| cls props str |	cls := self klass.	props := self properties.	str := self createBuildStream.	str h2With: props commentTitle, ':'.	str p.	str pre.	str nextPutAll: cls comment.	str preEnd.	str hr.	str endEntry.	self add: str named: #classComment.	! !!DlClassHtmlDoc methodsFor: 'building contents' stamp: 'M.U 1/24/2000 01:32'!buildClassDetail	| props str |	props := self properties.	str := self createBuildStream.	str h2With: props detailTitle , ':'.	self writeVariablesDetail.	self writeMethodsDetail.	str endEntry.	self add: str named: #classDetail.! !!DlClassHtmlDoc methodsFor: 'building contents' stamp: 'M.U 1/24/2000 01:32'!buildClassHierarchy	| props str |	props := self properties.	str := self createBuildStream.	str h2With: props hierarchyTitle , ':'.	self writeClassHierarchy.	str hr.	str endEntry.	self add: str named: #classHierarchy.! !!DlClassHtmlDoc methodsFor: 'building contents' stamp: 'M.U 1/24/2000 01:32'!buildClassSummary	| props str |	props := self properties.	str := self createBuildStream.	str h2With: props summaryTitle , ':'.	self writeVariablesSummary.	self writePoolsSummary.	self writeMethodsSummary.	str endEntry.	self add: str named: #classSummary.! !!DlClassHtmlDoc methodsFor: 'building contents' stamp: 'M.U 12/26/1999 01:07'!buildMainContents	self buildMainHeader.	self buildClassComment.	self buildClassHierarchy.	self buildClassSummary.	self buildClassDetail.! !!DlClassHtmlDoc methodsFor: 'building contents' stamp: 'mu 1/3/2001 22:34'!buildMainHeader	| props str tgt  cls |	cls := self klass.	props := self properties.	tgt := props mainFrameName.	str := self createBuildStream.	str p.	str center.	str h1With: cls name.	str centerEnd.	str hr.	cls isResolved		ifTrue: 			[ | cat |			cat := cls category.			cat isNil				ifTrue: [str nextPutAll: props noneTitle]				ifFalse: [str						anchorRef: props classCategoryDetailName , props htmlSuffix						target: tgt						with: cat name]]		ifFalse: [props outputResolvedOnly ifFalse: [str italicWith: props notResolvedTitle]].	str hr.	str endEntry.	self add: str named: #mainHeader! !!DlClassHtmlDoc methodsFor: 'accessing' stamp: 'M.U 12/26/1999 00:38'!klass	^klass! !!DlClassHtmlDoc methodsFor: 'accessing' stamp: 'M.U 12/26/1999 00:38'!klass: aValue	klass := aValue! !!DlClassHtmlDoc methodsFor: 'private' stamp: 'M.U 1/3/2000 19:46'!writeClassHierarchy	| str cls subs supers |	str := self buildStream.	cls := self klass.	supers := cls allSuperclasses.	supers reverseDo: 			[:each | 			str blockquote.			self writeClassLinkOf: each].	str blockquote.	str bold; italic.	str nextPutAll: cls name.	str italicEnd; boldEnd.	str blockquoteEnd.	subs := cls subclasses.	(subs isNil or: [subs isEmpty])		ifFalse: 			[str blockquote.			str ul.			subs do: 				[:each | 				str li.				self writeClassLinkOf: each].			str ulEnd.			str blockquoteEnd].	supers do: [:each | str blockquoteEnd].! !!DlClassHtmlDoc methodsFor: 'private' stamp: 'mu 5/20/2003 02:46'!writeClassLinkOf: aDlAnalyzableClass 	| props str targetCls foundCls |	props := self properties.	str := self buildStream.	targetCls := aDlAnalyzableClass.	foundCls := self analysisStorage getAllClasses detect: [:analyzedCls | analyzedCls = targetCls]				ifNone: [].	(foundCls isNil or: [foundCls isResolved not])		ifTrue: [str nextPutAll: targetCls name]		ifFalse: [str anchorRef: '../' , (self fixName: foundCls category name) , '/' , foundCls name , props htmlSuffix with: foundCls name].! !!DlClassHtmlDoc methodsFor: 'private' stamp: 'MU 2/25/2000 23:35'!writeMethodsDetail	| props cls instMCats clsMCats |	props := self properties.	cls := self klass.	instMCats := props outputResolvedOnly ifTrue:[ cls instMethodCategories select:[:each | each isResolved].] ifFalse:[ cls instMethodCategories].	clsMCats := props outputResolvedOnly ifTrue:[ cls classMethodCategories select:[:each | each isResolved]] ifFalse:[ cls classMethodCategories].	instMCats isEmpty ifFalse: [self writeMethodsDetailTable: instMCats caption: props instanceMethodsTitle , ':'.].	clsMCats isEmpty ifFalse: [self writeMethodsDetailTable: clsMCats caption: props classMethodsTitle , ':'].! !!DlClassHtmlDoc methodsFor: 'private' stamp: 'MU 2/28/2000 00:34'!writeMethodsDetailTable: aMethodCategories caption: aCaptionString 	| props str mCats |	props := self properties.	str := self buildStream.	mCats := props outputResolvedOnly ifTrue:[ aMethodCategories select: [:each | (each methods detect:[:mt | mt isResolved] ifNone:[]) notNil]] ifFalse:[aMethodCategories].	str center.	str h3With: aCaptionString.	str centerEnd.	mCats do: 		[:mCat | 		self writeTableBegin.		str tr.		str tagClass: props highlightName.		str th.		str boldWith: mCat name.		str thEnd.		str trEnd.		mCat methods do: 			[:mth | 			str tr.			str tagClass: props shadeName.			str td.			str				anchorName: mth description , ' ' , mth name				class: mth minorKey				with: mth signature.			str tdEnd.			str trEnd.			mth sourceBody isNil				ifFalse: 					[str tr.					str tagClass: props normalName.					str td.					str pre.					str nextPutAll: mth sourceBody.					str preEnd.					str tdEnd.					str trEnd]].		str tableEnd.		str br]! !!DlClassHtmlDoc methodsFor: 'private' stamp: 'MU 3/10/2000 23:16'!writeMethodsSummary	| str cls props instMCats clsMCats |	str := self buildStream.	cls := self klass.	props := self properties.	instMCats := props outputResolvedOnly				ifTrue: [cls instMethodCategories select: [:each | each isResolved]]				ifFalse: [cls instMethodCategories].	clsMCats := props outputResolvedOnly				ifTrue: [cls classMethodCategories select: [:each | each isResolved]]				ifFalse: [cls classMethodCategories].	str center.	str h3With: props methodsTitle , ':'.	str centerEnd.	self		writeInstanceClassTableUsing: 			[instMCats isEmpty ifFalse: [self writeMethodsSummaryTable: instMCats with: props instanceMethodsTitle].			clsMCats isEmpty ifFalse: [self writeMethodsSummaryTable: clsMCats with: props classMethodsTitle]].! !!DlClassHtmlDoc methodsFor: 'private' stamp: 'MU 2/25/2000 23:33'!writeMethodsSummaryTable: aMethodCategories with: aCaptionString 	| str |	str := self buildStream.	str td.	aMethodCategories do: 		[:mCat | 		str anchorName: mCat description , ' ' , mCat name with: mCat name.		str ul.		mCat methods do: 			[:mth | 			str li.			mth isResolved				ifTrue: [str						anchorRef: '#' , mth description , ' ' , mth name						class: mth minorKey						with: mth name]				ifFalse: [str nextPutAll: mth name]].		str ulEnd].	str tdEnd.! !!DlClassHtmlDoc methodsFor: 'private' stamp: 'MU 2/28/2000 00:40'!writePoolsSummary	| pools props str |	pools := self klass pools.	pools isEmpty		ifFalse: 			[props := self properties.			str := self buildStream.			str center.			str h3With: props poolTitle, ':'.			str centerEnd.			self writeTableBegin.			str tr.			str tagClass: props normalName.			pools do: 				[:each | 				str td.				str anchorRef: '../' , props poolDirectoryName , '/' , each name, props htmlSuffix with: each name.				str tdEnd].			str trEnd.			str tableEnd.			str br].! !!DlClassHtmlDoc methodsFor: 'private' stamp: 'M.U 12/26/1999 01:44'!writeVariablesDetail	| props cls |	props := self properties.	cls := self klass.	self writeVariablesDetailTable: cls instVariables caption: props instanceVariablesTitle, ':'.	self writeVariablesDetailTable: cls classVariables caption: props classVariablesTitle, ':'.	self writeVariablesDetailTable: cls classInstVariables caption: props classInstanceVariablesTitle, ':'.! !!DlClassHtmlDoc methodsFor: 'private' stamp: 'MU 2/28/2000 00:40'!writeVariablesDetailTable: aCollectionOfDlLocalVariable caption: aCaptionString 	| str props v |	aCollectionOfDlLocalVariable isEmpty		ifFalse: 			[str := self buildStream.			props := self properties.			str center.			str h3With: aCaptionString.			str centerEnd.			aCollectionOfDlLocalVariable do: 				[:each | 				self writeTableBegin.				str tr.				str tagClass: props shadeName.				str th.				str anchorName: each description , ' ' , each name with: each name.				str thEnd.				str trEnd.				each comment isNil					ifFalse: 						[str tr.						str tagClass: props normalName.						str td.						str dl.						str dt.						str nextPutAll: props commentTitle , ':'.						str dtEnd.						str dd.						str nextPutAll: each comment.						str ddEnd.						str dlEnd.						str tdEnd.						str trEnd].				each initialValue isNil					ifFalse: 						[str tr.						str tagClass: props normalName.						str td.						str dl.						str dt.						str nextPutAll: props initialValueTitle , ':'.						str dtEnd.						str dd.						str stStringPutAll: each initialValue.						str ddEnd.						str dlEnd.						str tdEnd.						str trEnd].				each tagKeys do: 					[:k | 					v := each tagAt: k.					v isNil						ifFalse: 							[str tr.							str tagClass: props normalName.							str td.							str dl.							str dt.							str nextPutAll: k , ':'.							str dtEnd.							str dd.							str nextPutAll: v.							str ddEnd.							str dlEnd.							str tdEnd.							str trEnd]].				str tableEnd].			str br].! !!DlClassHtmlDoc methodsFor: 'private' stamp: 'M.U 12/26/1999 01:37'!writeVariablesSummary	| props cls |	props := self properties.	cls := self klass.	self writeVariablesSummaryTable: cls instVariables caption: props instanceVariablesTitle, ':'.	self writeVariablesSummaryTable: cls classVariables caption: props classVariablesTitle, ':'.	self writeVariablesSummaryTable: cls classInstVariables caption: props classInstanceVariablesTitle, ':'.! !!DlClassHtmlDoc methodsFor: 'private' stamp: 'MU 2/28/2000 00:40'!writeVariablesSummaryTable: aCollectionOfDlLocalVariable caption: aCaptionString 	| str props |	aCollectionOfDlLocalVariable isEmpty		ifFalse: 			[str := self buildStream.			props := self properties.			str center.			str h3With: aCaptionString.			str centerEnd.			self writeTableBegin.			str tr.			str tagClass: props normalName.			aCollectionOfDlLocalVariable do: 				[:each | 				str td.				str anchorRef: '#' , each description , ' ' , each name with: each name.				str tdEnd].			str trEnd.			str tableEnd.			str br].! !DlDandelionHtmlDoc subclass: #DlGlobalHtmlDoc	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-dynDoc-html'!!DlGlobalHtmlDoc commentStamp: '<historical>' prior: 0!I am an abstract class which shows global information.#creator[:masashi | ^umezawa] #version 0.1 M.U!!DlGlobalHtmlDoc methodsFor: 'initialize-release' stamp: 'M.U 1/20/2000 18:50'!initForBuild	super initForBuild.	self styleSheetLocation: '../', self styleSheetLocation.! !!DlGlobalHtmlDoc methodsFor: 'private' stamp: 'MU 2/28/2000 00:41'!writeGlobalScopeVariablesTableRowsWith: aCollectionOfDlGlobalScopeVariable 	| str props nm |	str := self buildStream.	props := self properties.	aCollectionOfDlGlobalScopeVariable do: 		[:each | 		str tr.		str tagClass: props shadeName.		str td.		nm := each name.		str anchorName: nm with: nm.		str tdEnd.		str trEnd.		str tr.		str tagClass: props normalName.		str td.		str dl.		str dt.		str nextPutAll: props classTitle , ':'.		str dtEnd.		str dd.		str nextPutAll: each type printString.		str ddEnd.		str dlEnd.		str tdEnd.		str trEnd.		str tr.		str tagClass: props normalName.		str td.		str dl.		str dt.		str nextPutAll: props valueTitle , ':'.		str dtEnd.		str dd.		str nextPutAll: each value printString.		str ddEnd.		str dlEnd.		str tdEnd.		str trEnd].! !DlGlobalHtmlDoc subclass: #DlGlobalRootHtmlDoc	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-dynDoc-html'!!DlGlobalRootHtmlDoc commentStamp: '<historical>' prior: 0!I represent a html page which shows GlobalRoot information.#creator[:masashi | ^umezawa] #version 0.1 M.U!!DlGlobalRootHtmlDoc methodsFor: 'initialize-release' stamp: 'M.U 12/27/1999 00:29'!initForBuild	| props |	super initForBuild.	props := self properties.	self title: props allGlobalIndexTitle.! !!DlGlobalRootHtmlDoc methodsFor: 'building contents' stamp: 'MU 2/28/2000 00:36'!buildMainContents	| props str |	props := self properties.	str := self createBuildStream.	str p.	str center.	str h1With: props allGlobalIndexTitle.	str centerEnd.	str hr.	str anchorRef: '../' , props overviewName , props htmlSuffix with: props overviewName.	str hr.	self analysisStorage getAllGlobalRoots do: 		[:smtk | 		str h2With: smtk name.		self writeTableBegin.		str tr.		str tagClass: props highlightName.		str th.		str boldWith: props allGlobalIndexTitle.		str thEnd.		smtk isResolved			ifTrue: [self writeGlobalScopeVariablesTableRowsWith: smtk globalVariables]			ifFalse: [props outputResolvedOnly ifFalse: [str italicWith: props notResolvedTitle]].		str tableEnd].	str endEntry.	self add: str named: #main.! !DlDandelionHtmlDoc subclass: #DlOverviewHtmlDoc	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-dynDoc-html'!!DlOverviewHtmlDoc commentStamp: 'mu 5/21/2003 11:53' prior: 0!I represent an overview html page.#creator[:masashi | ^umezawa] #version 0.2 M.U!!DlOverviewHtmlDoc methodsFor: 'initialize-release' stamp: 'M.U 12/25/1999 22:48'!initForBuild	| props |	super initForBuild.	props := self properties.	self title: props systemTitle, ' ', props allClassCategoryIndexTitle.! !!DlOverviewHtmlDoc methodsFor: 'building contents' stamp: 'MU 5/20/2003 00:43'!buildAllClassCategoriesSummary	| str tgt nm props |	props := self properties.	tgt := props subMenuFrameName.	str := self createBuildStream.	self writeTableBegin.	str tr.	str tagClass: props highlightName.	str th.	str boldWith: props allClassCategoryIndexTitle.	str thEnd.	self analysisStorage getAllClassCategories do:[ :each |		str tr.		str tagClass: props normalName.		str td.		nm :=  each name.		str anchorRef: ((self fixName:nm), '/', props classCategorySummaryName, props htmlSuffix) target: tgt with: nm.		str tdEnd.		str trEnd.	].	str tableEnd.	str hr.	str endEntry.	self add: str named: #allClassCategoriesSummary.			! !!DlOverviewHtmlDoc methodsFor: 'building contents' stamp: 'MU 2/28/2000 00:37'!buildAllGlobalsSummary	|  globals props str tgt nm |	globals := self analysisStorage getAllGlobalVariables.	globals isEmpty		ifFalse: 			[props := self properties.			str := self createBuildStream.			props := self properties.			tgt := props mainFrameName.			self writeTableBegin.			str tr.			str tagClass: props highlightName.			str th.			str boldWith: props allGlobalIndexTitle.			str thEnd.			str trEnd.			globals do: 				[:each | 				str tr.				str tagClass: props normalName.				str td.				nm := each name.				str					anchorRef: props globalDirectoryName , '/' , props generalIndexName , props htmlSuffix, '#', nm					target: tgt					with: nm.				str tdEnd.				str trEnd].			str tableEnd.			str hr.			str endEntry.			self add: str named: #allGlobalsSummary.].				! !!DlOverviewHtmlDoc methodsFor: 'building contents' stamp: 'MU 2/28/2000 00:37'!buildAllPoolsSummary	|  props str tgt nm pools |	pools := self analysisStorage getAllPools.	pools isEmpty		ifFalse: 			[props := self properties.			str := self createBuildStream.			props := self properties.			tgt := props mainFrameName.			self writeTableBegin.			str tr.			str tagClass: props highlightName.			str th.			str boldWith: props allPoolIndexTitle.			str thEnd.			str trEnd.			pools do: 				[:each | 				str tr.				str tagClass: props normalName.				str td.				nm := each name.				str					anchorRef: props poolDirectoryName , '/' , nm , props htmlSuffix					target: tgt					with: nm.				str tdEnd.				str trEnd].			str tableEnd.			str hr.			str endEntry.			self add: str named: #allPoolsSummary.].			! !!DlOverviewHtmlDoc methodsFor: 'building contents' stamp: 'M.U 12/25/1999 22:57'!buildMainContents	self buildMainHeader.	self buildAllClassCategoriesSummary.	self buildAllGlobalsSummary.	self buildAllPoolsSummary.			! !!DlOverviewHtmlDoc methodsFor: 'building contents' stamp: 'M.U 1/24/2000 01:34'!buildMainHeader	| str props |	props := self properties.	str := self createBuildStream.	str p.	str center.	str h1With: props systemTitle.	str centerEnd.	str hr.	str endEntry.	self add: str named: #mainHeader.				! !DlGlobalHtmlDoc subclass: #DlPoolHtmlDoc	instanceVariableNames: 'pool'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-dynDoc-html'!!DlPoolHtmlDoc commentStamp: '<historical>' prior: 0!I represent a html page which shows Pool information.#creator[:masashi | ^umezawa] #version 0.1 M.U!!DlPoolHtmlDoc methodsFor: 'initialize-release' stamp: 'M.U 12/26/1999 02:06'!initForBuild	super initForBuild.	self title: self pool name.! !!DlPoolHtmlDoc methodsFor: 'building contents' stamp: 'MU 2/28/2000 00:38'!buildMainContents	| props str po |	po := self pool.	props := self properties.	str := self createBuildStream.	str p.	str center.	str h1With: po name.	str centerEnd.	str hr.	str anchorRef: '../' , props overviewName , props htmlSuffix with: props overviewName.	str hr.	po isResolved		ifTrue: 			[self writeTableBegin.			str tr.			str tagClass: props highlightName.			str th.			str boldWith: po name.			str thEnd.			self writeGlobalScopeVariablesTableRowsWith: po poolVariables.			str tableEnd]		ifFalse: [props outputResolvedOnly ifFalse: [str italicWith: props notResolvedTitle]].	str endEntry.	self add: str named: #main.! !!DlPoolHtmlDoc methodsFor: 'accessing' stamp: 'M.U 12/26/1999 02:05'!pool	^pool! !!DlPoolHtmlDoc methodsFor: 'accessing' stamp: 'M.U 12/26/1999 02:05'!pool: aValue	pool := aValue! !DlDandelionHtmlDoc subclass: #DlTopHtmlDoc	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-dynDoc-html'!!DlTopHtmlDoc commentStamp: '<historical>' prior: 0!I represent a TOC page, assuming browser supports frames.#creator[:masashi | ^umezawa] #version 0.1 M.U!!DlTopHtmlDoc methodsFor: 'initialize-release' stamp: 'M.U 12/30/1999 19:25'!initForBuild	| props |	super initForBuild.	props := self properties.	self title: props systemTitle, ' ', props topPageTitle.! !!DlTopHtmlDoc methodsFor: 'building contents' stamp: 'M.U 1/24/2000 01:34'!buildFooter	| str |	str := self createBuildStream.	str htmlEnd.	str endEntry.	self add: str named: #footer.! !!DlTopHtmlDoc methodsFor: 'building contents' stamp: 'M.U 1/24/2000 01:34'!buildHeader	| props str |	str := self createBuildStream.	props := self properties.	str commentWith: props creatorComment, ' ', Time dateAndTimeNow printString.	str declareHtml4f.	str html.	str head.	str titleWith: self title.	str metaName: 'GENERATOR'  content: self generator.	str headEnd.	str endEntry.	self add: str named: #header.! !!DlTopHtmlDoc methodsFor: 'building contents' stamp: 'M.U 1/24/2000 01:34'!buildMainContents	| str props |	props := self properties.	str := self createBuildStream.	str frameSetCols: '20%,80%'.	str frameSetRows: '30%,70%'.	str frame: props allClassCategoryIndexName, props htmlSuffix name: props topMenuFrameName.	str frame: props allClassIndexName, props htmlSuffix name: props subMenuFrameName.	str frameSetEnd.	str frame: props overviewName, props htmlSuffix name: props mainFrameName.	str noframes.	str h2With: props sorryTitle.	str p.	str htmlPutAll: props nonFrameGuide.	str br.	str anchorRef: props overviewName, props htmlSuffix with: props nonFrameTitle.	str noframesEnd.	str frameSetEnd.	str endEntry.	self add: str named: #main.			! !DlDandelionHtmlDoc subclass: #DlWholeIndexHtmlDoc	instanceVariableNames: 'analyzables analyzable fromToString'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-dynDoc-html'!!DlWholeIndexHtmlDoc commentStamp: 'mu 5/21/2003 11:52' prior: 0!I represent a WholeIndex html page.#creator[:masashi | ^umezawa] #version 0.2 M.U!!DlWholeIndexHtmlDoc methodsFor: 'initialize-release' stamp: 'MU 3/16/2000 01:59'!initForBuild	| props  |	super initForBuild.	props := self properties.	self fromToString: self createFromToString.	self title: props systemTitle , ' ' , props wholeIndexTitle, ': ', self fromToString.	self styleSheetLocation: '../', self styleSheetLocation.	! !!DlWholeIndexHtmlDoc methodsFor: 'building contents' stamp: 'MU 3/16/2000 01:56'!buildMainContents	| str props com |	str := self createBuildStream.	props := self properties.	str h1With: props wholeIndexTitle, ': ', self fromToString..	str hr.	str p.	str dl.	self analyzables do: 		[:each | 		self analyzable: each.		str dt.		self writeAnalyzableDescription.		str dd.		com := each comment.		com isNil			ifTrue: [str refSpace]			ifFalse: 				[str pre.				str nextPutAll: each comment.				str preEnd]].	str dlEnd.	str endEntry.	self add: str named: #main.	! !!DlWholeIndexHtmlDoc methodsFor: 'accessing' stamp: 'M.U 12/30/1999 17:40'!analyzable	^analyzable! !!DlWholeIndexHtmlDoc methodsFor: 'accessing' stamp: 'M.U 12/30/1999 17:40'!analyzable: aValue	analyzable := aValue! !!DlWholeIndexHtmlDoc methodsFor: 'accessing' stamp: 'M.U 12/28/1999 23:39'!analyzables	^analyzables! !!DlWholeIndexHtmlDoc methodsFor: 'accessing' stamp: 'M.U 12/28/1999 23:39'!analyzables: aValue	analyzables := aValue! !!DlWholeIndexHtmlDoc methodsFor: 'accessing' stamp: 'MU 3/16/2000 01:53'!fromToString	^fromToString! !!DlWholeIndexHtmlDoc methodsFor: 'accessing' stamp: 'MU 3/16/2000 01:53'!fromToString: aValue	fromToString := aValue! !!DlWholeIndexHtmlDoc methodsFor: 'private' stamp: 'MU 3/19/2000 02:28'!createFromToString	^'( ', (self analyzables first name), ' - ', (self analyzables last name), ' )'	! !!DlWholeIndexHtmlDoc methodsFor: 'private' stamp: 'M.U 12/30/1999 18:02'!writeAnalyzableDescription	| str |	str := self buildStream.	self writeAnalyzableDescriptionLink.	str nextPutAll: ' - '.	self writeAnalyzableDescriptionString.	^str! !!DlWholeIndexHtmlDoc methodsFor: 'private' stamp: 'mu 5/20/2003 01:59'!writeAnalyzableDescriptionLink	| ana str props ref cls |	ana := self analyzable.	str := self buildStream.	props := self properties.	ana isResolved		ifTrue: 			[ref := '..'.			ana isClassCategory ifTrue: [ref := ref , '/' , (self fixName: ana name) , '/' , props classCategorySummaryName , props htmlSuffix].			ana isClass ifTrue: [ref := ref , '/' , (self fixName: ana category name) , '/' , ana name , props htmlSuffix].			ana isClassMember				ifTrue: 					[cls := ana klass.					ref := ref , '/' , (self fixName: cls category name).					ref := ref , '/' , cls name.					ref := ref , props htmlSuffix.					ref := ref , '#' , ana description , ' ' , ana name].			ana isGlobalRoot ifTrue: [ref := ref , '/' , props overviewName , props htmlSuffix].			ana isPool ifTrue: [ref := ref , '/' , props poolDirectoryName , '/' , ana name , props htmlSuffix].			ana isGlobalVariable ifTrue: [ref := ref , '/' , props globalDirectoryName , '/' , props generalIndexName , props htmlSuffix , '#' , ana name].			ana isPoolVariable ifTrue: [ref := ref , '/' , props poolDirectoryName , '/' , ana pool name , props htmlSuffix , '#' , ana name].			str anchorRef: ref with: ana name]		ifFalse: [props outputResolvedOnly ifFalse: [str boldWith: ana name]].! !!DlWholeIndexHtmlDoc methodsFor: 'private' stamp: 'M.U 12/31/1999 01:27'!writeAnalyzableDescriptionString	| props str ana desc |	props := self properties.	ana := self analyzable.	str := self buildStream.	desc := ana description.	str boldWith: desc.	ana isResolved		ifTrue: 			[str nextPutAll: ' ' , props definedInComment , ' '.			str nextPut: $".			ana isClassCategory ifTrue: [str italicWith: ana organizer name].			ana isClass ifTrue: [str italicWith: ana category name].			ana isClassMember ifTrue: [str italicWith: ana klass name].			ana isGlobalRoot ifTrue: [str italicWith: ana name].			ana isPool ifTrue: [str italicWith: ana globalRoot name].			ana isGlobalVariable ifTrue: [str italicWith: ana globalRoot name].			ana isPoolVariable ifTrue: [str italicWith: ana pool name].			str nextPut: $"].! !DlDandelionHtmlDoc subclass: #DlWholeIndexListHtmlDoc	instanceVariableNames: 'pageAndAnalyzables'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-dynDoc-html'!!DlWholeIndexListHtmlDoc commentStamp: '<historical>' prior: 0!I represent a WholeIndexList html page.#creator[:masashi | ^umezawa] #version 0.1 M.U!!DlWholeIndexListHtmlDoc methodsFor: 'initialize-release' stamp: 'M.U 1/20/2000 18:50'!initForBuild	| props |	super initForBuild.	props := self properties.	self title: props systemTitle , ' ' , props wholeIndexTitle.	self styleSheetLocation: '../', self styleSheetLocation.! !!DlWholeIndexListHtmlDoc methodsFor: 'building contents' stamp: 'MU 3/19/2000 02:36'!buildMainContents	| str props |	str := self createBuildStream.	props := self properties.	str center.	str h1With: props wholeIndexTitle.	str centerEnd.	str hr.	str ol.	self pageAndAnalyzables do: 		[:each | | pageName firstAna lastAna |		pageName := each at: 1.		firstAna := each at: 2.		lastAna := each at: 3.		str li.		str anchorRef: pageName with: pageName, ' ( ', firstAna name, ' - ', lastAna name, ' ) '].	str olEnd.	str hr.	str endEntry.	self add: str named: #main.	! !!DlWholeIndexListHtmlDoc methodsFor: 'accessing' stamp: 'MU 3/19/2000 02:21'!pageAndAnalyzables	^pageAndAnalyzables! !!DlWholeIndexListHtmlDoc methodsFor: 'accessing' stamp: 'MU 3/19/2000 02:22'!pageAndAnalyzables: aValue	pageAndAnalyzables := aValue! !