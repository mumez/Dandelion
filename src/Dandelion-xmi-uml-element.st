DlAbstractXmiElement subclass: #DlAbstractUmlElement	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!!DlAbstractUmlElement methodsFor: 'actions' stamp: 'MU 3/26/2002 18:44'!addTaggedValue: aTaggedValue	| elemName elem |	elemName := 'UML:ModelElement.taggedValue'.	elem := self findChildNamed: elemName.	elem isNil		ifTrue: [elem := self createChildNamed: elemName ].	^elem addChild: aTaggedValue! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'mu 11/15/2004 01:03'!changeability	^self getAttributeNamed: 'changeability' ifAbsentPut: ['changeable']! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'mu 11/15/2004 01:04'!changeability: changeability 	^self putAttributeNamed: 'changeability' value: changeability! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'MU 3/20/2002 17:38'!comment	| elem |	elem := self findChildNamed: 'UML:ModelElement.comment'.	^ elem isNil		ifTrue: ['']		ifFalse: [| comment | 			comment := (elem findChildNamed: DlFcComment tagName ).			comment elementName]! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'mu 11/23/2004 01:24'!comment: aString 	| elem |	(aString isNil or: [aString isEmpty]) ifTrue: [^self].	elem := self findChildNamed: 'UML:ModelElement.comment'.	elem isNil		ifTrue: [| comElem | 			comElem := self createChildNamed: 'UML:ModelElement.comment'.			comElem				addChild: (DlFcComment content: aString)]		ifFalse: [ (elem findChildNamed: DlFcComment tagName) elementName: aString]! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'MU 3/26/2002 19:09'!documentation	^self tagAt: 'documentation'! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'mu 11/23/2004 01:24'!documentation: aString	(aString isNil or: [aString isEmpty]) ifTrue: [^self].	self tagAt: 'documentation' put: aString! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'mu 11/13/2004 00:22'!elementName	^self getAttributeNamed: 'name' ifAbsentPut: ['']! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'mu 11/13/2004 00:21'!elementName: elemName 	^self putAttributeNamed: 'name' value: elemName! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'mu 11/13/2004 00:07'!isAbstract	^self getAttributeNamed: 'isAbstract' ifAbsentPut: [false]! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'mu 11/13/2004 00:07'!isAbstract: boolean 	^self putAttributeNamed: 'isAbstract' value: boolean! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'mu 11/13/2004 00:06'!isLeaf	^self getAttributeNamed: 'isLeaf' ifAbsentPut: [false]! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'mu 11/13/2004 00:07'!isLeaf: boolean 	^self putAttributeNamed: 'isLeaf' value: boolean! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'mu 11/13/2004 00:06'!isRoot	^self getAttributeNamed: 'isRoot' ifAbsentPut: [false]! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'mu 11/13/2004 00:04'!isRoot: boolean 	^self putAttributeNamed: 'isRoot' value: boolean! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'mu 11/13/2004 00:08'!isSpecification	^self getAttributeNamed: 'isSpecification' ifAbsentPut: [false]! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'mu 11/13/2004 00:08'!isSpecification: boolean 	^self putAttributeNamed: 'isSpecification' value: boolean! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'mu 11/16/2004 00:17'!ownerScope	^self getAttributeNamed: 'ownerScope' ifAbsentPut: ['instance']! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'mu 11/16/2004 00:17'!ownerScope: scope 	self putAttributeNamed: 'ownerScope' value: scope! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'MU 3/26/2002 18:45'!removeTaggedValue: aTaggedValue	| elemName elem |	elemName := 'UML:ModelElement.taggedValue'.	elem := self findChildNamed: elemName.	elem isNil		ifTrue: [elem := self createChildNamed: elemName ].	^elem removeChild: aTaggedValue! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'mu 11/22/2004 01:38'!tagAt: tagName 	| tagDef |	tagDef := DlFeTagDefinition definitionNamed: tagName.	tagDef isNil		ifFalse: [| taggedValue | 			taggedValue := self taggedValues						detect: [:each | each tagTypeRefId = tagDef xmiId]						ifNone: [].			^ taggedValue isNil				ifFalse: [taggedValue tagValue]].	^ nil! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'MU 3/26/2002 18:47'!tagAt: tagName put: tagValue	| taggedValue |	taggedValue := DlFeTaggedValue tag: tagName value: tagValue.	self addTaggedValue: taggedValue! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'MU 3/26/2002 19:03'!taggedValues	| elemName tagElem |	elemName := 'UML:ModelElement.taggedValue'.	tagElem := self findChildNamed: elemName.	^tagElem isNil ifTrue: [#()] ifFalse: [tagElem children]	! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'MU 3/7/2002 18:28'!targetScope	| elem |	elem := self findChildNamed: 'UML:StructuralFeature.targetScope'.	^ elem isNil		ifFalse: [elem xmiValue]! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'MU 3/7/2002 18:27'!targetScope: targetScope 	| elemName elem |	elemName := 'UML:StructuralFeature.targetScope'.	elem := self findChildNamed: elemName.	elem isNil		ifTrue: [elem := self createChildNamed: elemName ].	elem xmiValue: targetScope.! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'mu 11/10/2004 01:04'!visibility	^self getAttributeNamed: 'visibility' ifAbsentPut: ['private']! !!DlAbstractUmlElement methodsFor: 'actions' stamp: 'mu 11/10/2004 01:05'!visibility: visibility 	^self putAttributeNamed: 'visibility' value: visibility! !!DlAbstractUmlElement methodsFor: 'testing' stamp: 'MU 4/5/2002 11:11'!isAttribute	^false! !!DlAbstractUmlElement methodsFor: 'testing' stamp: 'mu 11/13/2004 02:41'!isClass	^false! !!DlAbstractUmlElement methodsFor: 'testing' stamp: 'MU 4/5/2002 11:11'!isOperation	^false! !!DlAbstractUmlElement methodsFor: 'testing' stamp: 'MU 3/19/2002 18:12'!isPackage	^false! !!DlAbstractUmlElement methodsFor: 'private' stamp: 'mu 11/19/2004 00:07'!privType: tagName elem: aUmlElement	| elemName elem |	elemName := tagName.	elem := self findChildNamed: elemName.	elem isNil		ifTrue: [elem := self createChildNamed: elemName ].	^elem addChild: aUmlElement asRef.! !DlAbstractUmlElement subclass: #DlFcAssociation	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!!DlFcAssociation methodsFor: 'private' stamp: 'mu 11/10/2004 00:47'!connection	| elemName elem |	elemName := 'UML:Association.connection'.	elem := self findChildNamed: elemName.	elem isNil		ifTrue: [| connection | 			connection := self createChildNamed: elemName.			^ connection]		ifFalse: [^ elem]! !!DlFcAssociation methodsFor: 'actions' stamp: 'mu 11/18/2004 01:34'!addAssociationEnd: aFcAssociationEnd		^self connection addChild: aFcAssociationEnd! !!DlFcAssociation methodsFor: 'actions' stamp: 'MU 4/5/2002 18:15'!addFromAssociationEnd: aFcAssociationEnd	| assocEnd |	assocEnd := self addAssociationEnd: aFcAssociationEnd.	assocEnd isNavigable: 'false'.	^assocEnd! !!DlFcAssociation methodsFor: 'actions' stamp: 'MU 4/5/2002 16:12'!addToAssociationEnd: aFcAssociationEnd	| assocEnd |	assocEnd := self addAssociationEnd: aFcAssociationEnd.	assocEnd isNavigable: 'true'.	^assocEnd! !!DlFcAssociation methodsFor: 'actions' stamp: 'mu 11/18/2004 00:35'!from: fromFcClass role: fromClassRole to: toFcClass role: toClassRole	| fromEnd toEnd |	fromEnd := self addFromAssociationEnd: (DlFcAssociationEnd name: fromClassRole).	fromEnd participant: fromFcClass.	toEnd := self addToAssociationEnd: (DlFcAssociationEnd name: toClassRole).	toEnd participant: toFcClass.! !!DlFcAssociation methodsFor: 'actions' stamp: 'MU 4/5/2002 16:48'!from: fromFcClass to: toFcClass 	^self from: fromFcClass role: '' to: toFcClass role: ''! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlFcAssociation class	instanceVariableNames: ''!!DlFcAssociation class methodsFor: 'instance creation' stamp: 'MU 4/5/2002 12:16'!name: associationName 	| inst |	inst := self newWithId.	inst elementName: associationName.	^ inst! !!DlFcAssociation class methodsFor: 'constants' stamp: 'mu 11/10/2004 00:45'!defaultTagName	^'UML:Association'! !DlAbstractUmlElement subclass: #DlFcAssociationEnd	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!!DlFcAssociationEnd methodsFor: 'actions' stamp: 'mu 11/16/2004 00:34'!isNavigable	^self getAttributeNamed: 'isNavigable' ifAbsentPut: [false]! !!DlFcAssociationEnd methodsFor: 'actions' stamp: 'mu 11/16/2004 00:35'!isNavigable: isNavigable	^self putAttributeNamed: 'isNavigable' value: isNavigable! !!DlFcAssociationEnd methodsFor: 'actions' stamp: 'mu 11/16/2004 00:50'!participant: aFcClass	| elemName elem |	elemName := 'UML:AssociationEnd.participant'.	elem := self findChildNamed: elemName.	elem isNil		ifTrue: [elem := self createChildNamed: elemName ].	elem addChild: aFcClass asClassifierRef.! !!DlFcAssociationEnd methodsFor: 'actions' stamp: 'mu 11/19/2004 00:08'!type: aFcClass 	self privType: 'UML:AssociationEnd.type' elem: aFcClass! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlFcAssociationEnd class	instanceVariableNames: ''!!DlFcAssociationEnd class methodsFor: 'constants' stamp: 'mu 11/10/2004 00:45'!defaultTagName	^'UML:AssociationEnd'! !!DlFcAssociationEnd class methodsFor: 'instance creation' stamp: 'MU 4/5/2002 12:04'!name: roleName	| inst |	inst := self newWithId.	inst elementName: roleName.	^inst! !DlAbstractUmlElement subclass: #DlFcAttribute	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!!DlFcAttribute methodsFor: 'actions' stamp: 'MU 3/26/2002 18:50'!beClassInstanceScope	^self tagAt: 'classInstance' put: 'true'! !!DlFcAttribute methodsFor: 'actions' stamp: 'MU 4/10/2002 12:02'!initialValue	| elem |	elem := self findChildNamed: 'UML:Attribute.initialValue'.	^ elem isNil		ifTrue: ['']		ifFalse: [| child | 			child := (elem findChildNamed: DlFdExpression tagName ).			child body]! !!DlFcAttribute methodsFor: 'actions' stamp: 'MU 4/10/2002 11:59'!initialValue: initialValue 	| elemName elem |	elemName := 'UML:Attribute.initialValue'.	elem := self findChildNamed: elemName.	elem isNil		ifTrue: [| childElem | 			childElem := self createChildNamed: elemName.			childElem				addChild: (DlFdExpression body: initialValue)]		ifFalse: [ (elem findChildNamed: DlFdExpression tagName) body: initialValue]! !!DlFcAttribute methodsFor: 'actions' stamp: 'mu 11/19/2004 00:07'!type: dataTypeOrClass 	self privType: 'UML:StructuralFeature.type' elem: dataTypeOrClass! !!DlFcAttribute methodsFor: 'testing' stamp: 'MU 4/5/2002 11:10'!isAttribute	^true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlFcAttribute class	instanceVariableNames: ''!!DlFcAttribute class methodsFor: 'constants' stamp: 'MU 3/7/2002 18:02'!defaultTagName	^'UML:Attribute'! !!DlFcAttribute class methodsFor: 'instance creation' stamp: 'MU 3/15/2002 17:16'!name: attribName ownerScope: ownerScope	| inst |	inst := self name: attribName ownerScope: ownerScope visibility: 'private'.	^inst ! !!DlFcAttribute class methodsFor: 'instance creation' stamp: 'MU 3/19/2002 14:20'!name: attribName ownerScope: ownerScope visibility: visibility 	| inst |	inst := self newWithId.	inst elementName: attribName.	inst visibility: visibility.	inst ownerScope: ownerScope.	^inst! !!DlFcAttribute class methodsFor: 'instance creation-st' stamp: 'MU 3/15/2002 17:24'!name: attribName	^self name: attribName isClassVariable: false! !!DlFcAttribute class methodsFor: 'instance creation-st' stamp: 'MU 3/15/2002 17:24'!name: attribName isClassVariable: aBoolean	| scope inst |	scope := aBoolean ifTrue: [ 'classifier' ] ifFalse: ['instance'].	inst := self name: attribName ownerScope: scope.	^inst ! !DlAbstractUmlElement subclass: #DlFcClass	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!!DlFcClass methodsFor: 'elements' stamp: 'MU 3/15/2002 17:28'!addClassfierFeature	^self addChild: (DlFcClassifierFeature new)! !!DlFcClass methodsFor: 'elements' stamp: 'MU 3/15/2002 17:47'!classfierFeature	^self findChildNamed: DlFcClassifierFeature tagName! !!DlFcClass methodsFor: 'elements' stamp: 'MU 3/19/2002 18:34'!hasClassfierFeature	^(self findChildNamed: DlFcClassifierFeature tagName) notNil! !!DlFcClass methodsFor: 'actions' stamp: 'MU 3/26/2002 18:56'!addClassInstVarNamed: classVarName 	| att |	self hasClassfierFeature ifFalse: [self addClassfierFeature].	att := (DlFcAttribute name: classVarName isClassVariable: true).	att beClassInstanceScope.	^self classfierFeature addChild: att! !!DlFcClass methodsFor: 'actions' stamp: 'MU 3/19/2002 14:17'!addClassMethodNamed: classMethodName 	self hasClassfierFeature ifFalse: [self addClassfierFeature].	^self classfierFeature addChild:(DlFcOperation name: classMethodName isClassMethod: true)! !!DlFcClass methodsFor: 'actions' stamp: 'MU 3/19/2002 14:17'!addClassVarNamed: classVarName 	self hasClassfierFeature ifFalse: [self addClassfierFeature].	^self classfierFeature addChild:(DlFcAttribute name: classVarName isClassVariable: true)! !!DlFcClass methodsFor: 'actions' stamp: 'MU 3/19/2002 14:17'!addInstMethodNamed: instMethodName 	self hasClassfierFeature ifFalse: [self addClassfierFeature].	^self classfierFeature addChild:(DlFcOperation name: instMethodName )! !!DlFcClass methodsFor: 'actions' stamp: 'MU 3/15/2002 17:49'!addInstVarNamed: instVarName 	self hasClassfierFeature ifFalse: [self addClassfierFeature].	^self classfierFeature addChild:(DlFcAttribute name: instVarName)! !!DlFcClass methodsFor: 'actions' stamp: 'MU 4/12/2002 13:42'!addMethod: fcOperation	self hasClassfierFeature ifFalse: [self addClassfierFeature].	^self classfierFeature addChild: fcOperation! !!DlFcClass methodsFor: 'actions' stamp: 'mu 11/16/2004 00:50'!asClassifierRef	^(self class named: 'UML:Classifier') xmiIdRef: (self xmiId)! !!DlFcClass methodsFor: 'actions' stamp: 'MU 4/5/2002 11:16'!attributes	self hasClassfierFeature ifFalse: [^#()].	^self classfierFeature children select: [:each | each isAttribute]! !!DlFcClass methodsFor: 'actions' stamp: 'MU 4/5/2002 11:14'!operations	self hasClassfierFeature ifFalse: [^#()].	^self classfierFeature children select: [:each | each isOperation]! !!DlFcClass methodsFor: 'actions' stamp: 'MU 4/8/2002 15:18'!package	^self parent notNil ifTrue: [self parent parent] ifFalse:[nil]! !!DlFcClass methodsFor: 'actions' stamp: 'MU 3/20/2002 16:39'!superclass	| elem |	elem := self findChildNamed: 'UML:GeneralizableElement.specialization'.	^elem isNil  ifTrue: [nil]		ifFalse: [elem parent]! !!DlFcClass methodsFor: 'testing' stamp: 'mu 11/13/2004 02:41'!isClass	^true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlFcClass class	instanceVariableNames: ''!!DlFcClass class methodsFor: 'constants' stamp: 'MU 3/7/2002 17:56'!defaultTagName	^'UML:Class'! !!DlFcClass class methodsFor: 'instance creation' stamp: 'MU 3/19/2002 14:00'!name: elemName 	| inst |	inst := self newWithId.	inst elementName: elemName.	^inst! !DlAbstractUmlElement subclass: #DlFcClassifierFeature	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlFcClassifierFeature class	instanceVariableNames: ''!!DlFcClassifierFeature class methodsFor: 'constants' stamp: 'MU 3/7/2002 18:01'!defaultTagName	^'UML:Classifier.feature'! !DlAbstractUmlElement subclass: #DlFcComment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlFcComment class	instanceVariableNames: ''!!DlFcComment class methodsFor: 'instance creation' stamp: 'MU 3/20/2002 17:39'!content: aString	^self newWithId elementName: aString 	! !!DlFcComment class methodsFor: 'constants' stamp: 'MU 3/7/2002 19:12'!defaultTagName	^'UML:Comment'! !DlAbstractUmlElement subclass: #DlFcDataType	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlFcDataType class	instanceVariableNames: ''!!DlFcDataType class methodsFor: 'constants' stamp: 'MU 3/7/2002 19:06'!defaultTagName	^'UML:DataType'! !!DlFcDataType class methodsFor: 'instance creation' stamp: 'MU 4/10/2002 13:48'!name: dataTypeName	| inst |	inst := self newWithId.	inst elementName: dataTypeName.	^inst! !DlAbstractUmlElement subclass: #DlFcFeatureOwner	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlFcFeatureOwner class	instanceVariableNames: ''!!DlFcFeatureOwner class methodsFor: 'constants' stamp: 'MU 3/7/2002 19:07'!defaultTagName	^'UML:Feature.owner'! !DlAbstractUmlElement subclass: #DlFcGeneralization	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!!DlFcGeneralization methodsFor: 'actions' stamp: 'MU 3/20/2002 16:39'!childElement	| elemName elem |	elemName := 'UML:Generalization.child'.	elem := self findChildNamed: elemName.	^elem isNil		ifTrue: [nil ] ifFalse: [elem]	! !!DlFcGeneralization methodsFor: 'actions' stamp: 'mu 11/16/2004 01:03'!childElement: anUmlElement	| elemName elem |	elemName := 'UML:Generalization.child'.	elem := self findChildNamed: elemName.	elem isNil		ifTrue: [elem := self createChildNamed: elemName ].	^elem addChild: anUmlElement asRef! !!DlFcGeneralization methodsFor: 'actions' stamp: 'MU 3/20/2002 16:39'!parentElement	| elemName elem |	elemName := 'UML:Generalization.parent'.	elem := self findChildNamed: elemName.	^elem isNil		ifTrue: [nil ] ifFalse: [elem]	! !!DlFcGeneralization methodsFor: 'actions' stamp: 'mu 11/16/2004 01:03'!parentElement: anUmlElement	| elemName elem |	elemName := 'UML:Generalization.parent'.	elem := self findChildNamed: elemName.	elem isNil		ifTrue: [elem := self createChildNamed: elemName ].	^elem addChild: anUmlElement asRef! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlFcGeneralization class	instanceVariableNames: ''!!DlFcGeneralization class methodsFor: 'constants' stamp: 'MU 3/7/2002 17:57'!defaultTagName	^'UML:Generalization'! !!DlFcGeneralization class methodsFor: 'instance creation' stamp: 'MU 3/19/2002 18:52'!parent: parentDlFcClass child: childDlFcClass	| inst |	inst := self newWithId.	inst parentElement: parentDlFcClass.	inst childElement: childDlFcClass.	^inst! !DlAbstractUmlElement subclass: #DlFcModelElementComment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlFcModelElementComment class	instanceVariableNames: ''!!DlFcModelElementComment class methodsFor: 'constants' stamp: 'MU 3/7/2002 19:12'!defaultTagName	^'UML:ModelElement.comment'! !DlAbstractUmlElement subclass: #DlFcNamespaceOwnedElement	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlFcNamespaceOwnedElement class	instanceVariableNames: ''!!DlFcNamespaceOwnedElement class methodsFor: 'constants' stamp: 'MU 3/7/2002 17:40'!defaultTagName	^'UML:Namespace.ownedElement'! !DlAbstractUmlElement subclass: #DlFcOperation	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!!DlFcOperation methodsFor: 'actions' stamp: 'MU 4/5/2002 11:25'!addParameter: aFcParameter	| elemName elem |	elemName := 'UML:BehavioralFeature.parameter'.	elem := self findChildNamed: elemName.	elem isNil		ifTrue: [elem := self createChildNamed: elemName ].	^elem addChild: aFcParameter! !!DlFcOperation methodsFor: 'actions' stamp: 'mu 11/16/2004 01:16'!concurrency	^self getAttributeNamed: 'concurrency' ifAbsentPut: ['sequential']! !!DlFcOperation methodsFor: 'actions' stamp: 'mu 11/16/2004 01:17'!concurrency: concurrency 	^self putAttributeNamed: 'concurrency' value: concurrency! !!DlFcOperation methodsFor: 'actions' stamp: 'mu 11/16/2004 01:16'!isQuery	^self getAttributeNamed: 'isQuery' ifAbsentPut: [false]! !!DlFcOperation methodsFor: 'actions' stamp: 'mu 11/16/2004 01:17'!isQuery: boolean 	^self putAttributeNamed: 'isQuery' value: boolean! !!DlFcOperation methodsFor: 'actions' stamp: 'MU 4/5/2002 10:40'!protocol	^self tagAt: 'protocol'! !!DlFcOperation methodsFor: 'actions' stamp: 'MU 4/5/2002 10:40'!protocol: aString	self tagAt: 'protocol' put: aString! !!DlFcOperation methodsFor: 'testing' stamp: 'MU 4/5/2002 11:10'!isOperation	^true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlFcOperation class	instanceVariableNames: ''!!DlFcOperation class methodsFor: 'constants' stamp: 'MU 3/7/2002 18:03'!defaultTagName	^'UML:Operation'! !!DlFcOperation class methodsFor: 'instance creation' stamp: 'MU 3/19/2002 14:10'!name: attribName ownerScope: ownerScope	| inst |	inst := self name: attribName ownerScope: ownerScope visibility: 'public'.	^inst ! !!DlFcOperation class methodsFor: 'instance creation' stamp: 'MU 3/19/2002 14:20'!name: attribName ownerScope: ownerScope visibility: visibility 	| inst |	inst := self newWithId.	inst elementName: attribName.	inst visibility: visibility.	inst ownerScope: ownerScope.	^inst! !!DlFcOperation class methodsFor: 'instance creation-st' stamp: 'MU 3/19/2002 14:12'!name: attribName	^self name: attribName isClassMethod: false! !!DlFcOperation class methodsFor: 'instance creation-st' stamp: 'MU 3/19/2002 14:11'!name: attribName isClassMethod: aBoolean	| scope inst |	scope := aBoolean ifTrue: [ 'classifier' ] ifFalse: ['instance'].	inst := self name: attribName ownerScope: scope.	^inst ! !DlAbstractUmlElement subclass: #DlFcParameter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlFcParameter class	instanceVariableNames: ''!!DlFcParameter class methodsFor: 'constants' stamp: 'MU 4/5/2002 11:02'!defaultTagName	^'UML:Parameter'! !!DlFcParameter class methodsFor: 'instance creation' stamp: 'MU 4/5/2002 11:05'!name: paramName	| inst |	inst := self newWithId.	inst elementName: paramName.	^inst! !DlAbstractXmiElement subclass: #DlFcStructuralFeatureMultiplicity	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlFcStructuralFeatureMultiplicity class	instanceVariableNames: ''!!DlFcStructuralFeatureMultiplicity class methodsFor: 'constants' stamp: 'MU 3/7/2002 18:16'!defaultTagName	^'UML:StructuralFeature.multiplicity'! !DlAbstractUmlElement subclass: #DlFdExpression	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!!DlFdExpression methodsFor: 'actions' stamp: 'mu 11/16/2004 00:23'!body	^self getAttributeNamed: 'body' ifAbsentPut: ['']! !!DlFdExpression methodsFor: 'actions' stamp: 'mu 11/16/2004 00:23'!body: expressionBody	^self putAttributeNamed: 'body' value: expressionBody! !!DlFdExpression methodsFor: 'actions' stamp: 'mu 11/16/2004 00:22'!language	^self getAttributeNamed: 'language' ifAbsentPut: ['Smalltalk']! !!DlFdExpression methodsFor: 'actions' stamp: 'mu 11/16/2004 00:22'!language: languageName	^self putAttributeNamed: 'language' value: languageName! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlFdExpression class	instanceVariableNames: ''!!DlFdExpression class methodsFor: 'constants' stamp: 'mu 11/16/2004 00:23'!defaultTagName	^'UML:Expression'! !!DlFdExpression class methodsFor: 'instance creation' stamp: 'MU 4/10/2002 11:53'!body: bodyExpression 	^ self language: 'Smalltalk' body: bodyExpression! !!DlFdExpression class methodsFor: 'instance creation' stamp: 'MU 4/10/2002 11:52'!language: languageName body: bodyExpression 	^ self newWithId language: languageName;		 body: bodyExpression! !DlAbstractUmlElement subclass: #DlFdMultiplicity	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!!DlFdMultiplicity methodsFor: 'actions' stamp: 'MU 3/7/2002 18:19'!lower: lower upper: upper! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlFdMultiplicity class	instanceVariableNames: ''!!DlFdMultiplicity class methodsFor: 'instance creation' stamp: 'MU 3/7/2002 18:19'!lower: lower upper: upper! !!DlFdMultiplicity class methodsFor: 'constants' stamp: 'MU 3/7/2002 18:18'!defaultTagName	^'Foundation.Data_Types.Multiplicity'! !DlAbstractUmlElement subclass: #DlFeStereotype	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlFeStereotype class	instanceVariableNames: ''!!DlFeStereotype class methodsFor: 'constants' stamp: 'mu 11/16/2004 01:18'!defaultTagName	^'UML.Stereotype'! !DlAbstractUmlElement subclass: #DlFeTagDefinition	instanceVariableNames: ''	classVariableNames: 'Definitions'	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!!DlFeTagDefinition methodsFor: 'actions' stamp: 'mu 11/19/2004 00:13'!tagType	^self getAttributeNamed: 'tagType' ifAbsentPut: ['String']! !!DlFeTagDefinition methodsFor: 'actions' stamp: 'mu 11/19/2004 00:13'!tagType: aString	^self putAttributeNamed: 'tagType' value: aString! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlFeTagDefinition class	instanceVariableNames: ''!!DlFeTagDefinition class methodsFor: 'class initialization' stamp: 'mu 11/19/2004 01:11'!initDefaultDefinitions	self initDefaultDefinitionsByNames: #('protocol' 'documentation' 'changeSet') ! !!DlFeTagDefinition class methodsFor: 'class initialization' stamp: 'mu 11/19/2004 01:12'!initDefaultDefinitionsByNames: names	Definitions := Dictionary new.	names do: [:each | self name: each]! !!DlFeTagDefinition class methodsFor: 'class initialization' stamp: 'mu 11/19/2004 01:12'!initialize	"DlFeTagDefinition initialize"	self initDefaultDefinitions! !!DlFeTagDefinition class methodsFor: 'instance creation' stamp: 'mu 11/19/2004 01:03'!name: taggedValueName 	| inst |	inst := self definitionNamed: taggedValueName.	inst notNil ifTrue: [^inst].		inst := self newWithId.	inst elementName: taggedValueName.	inst tagType: 'String'.	self definitionPut: inst.		^ inst! !!DlFeTagDefinition class methodsFor: 'constants' stamp: 'mu 11/19/2004 00:16'!defaultTagName	^'UML:TagDefinition'! !!DlFeTagDefinition class methodsFor: 'accessing' stamp: 'mu 11/19/2004 01:07'!definitions	^Definitions values! !!DlFeTagDefinition class methodsFor: 'utilities' stamp: 'mu 11/19/2004 01:01'!definitionNamed: defName	^Definitions at: defName ifAbsent:[].! !!DlFeTagDefinition class methodsFor: 'utilities' stamp: 'mu 11/19/2004 01:05'!definitionPut: aTagDefinition	^Definitions at: aTagDefinition elementName put: aTagDefinition.! !DlAbstractUmlElement subclass: #DlFeTaggedValue	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!!DlFeTaggedValue methodsFor: 'initialize-release' stamp: 'MU 3/26/2002 18:40'!tag: tagString value: valueString	self privTag: tagString.	self privValue: valueString! !!DlFeTaggedValue methodsFor: 'actions' stamp: 'mu 11/22/2004 01:21'!tagType	^self privTag! !!DlFeTaggedValue methodsFor: 'actions' stamp: 'mu 11/22/2004 01:28'!tagTypeRefId	| elem |	elem := self findChildNamed: 'UML:TaggedValue.type'.	^ elem isNil		ifFalse: [| defElem | 			defElem := elem findChildNamed: 'UML:TagDefinition'.			defElem isNil				ifFalse: [defElem xmiIdRef]]! !!DlFeTaggedValue methodsFor: 'actions' stamp: 'MU 3/26/2002 19:07'!tagValue	^self privValue! !!DlFeTaggedValue methodsFor: 'private' stamp: 'mu 11/19/2004 01:47'!privTag	| elem |	elem := self findChildNamed: 'UML:TaggedValue.type'.	^elem isNil 		ifFalse: [elem]! !!DlFeTaggedValue methodsFor: 'private' stamp: 'mu 11/19/2004 01:43'!privTag: aString	self privType: 'UML:TaggedValue.type' elem: (DlFeTagDefinition name: aString) 	! !!DlFeTaggedValue methodsFor: 'private' stamp: 'mu 11/19/2004 00:51'!privValue	| elem |	elem := self findChildNamed: 'UML:TaggedValue.dataValue'.	^elem isNil 		ifFalse: [elem value]! !!DlFeTaggedValue methodsFor: 'private' stamp: 'mu 11/15/2004 01:32'!privValue: aString 	| elem |	elem := self findChildNamed: 'UML:TaggedValue.dataValue'.	elem isNil		ifTrue: [elem := self createChildNamed: 'UML:TaggedValue.dataValue'].	elem value: aString.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlFeTaggedValue class	instanceVariableNames: ''!!DlFeTaggedValue class methodsFor: 'constants' stamp: 'mu 11/15/2004 01:31'!defaultTagName	^'UML:TaggedValue'! !!DlFeTaggedValue class methodsFor: 'instance creation' stamp: 'MU 3/26/2002 18:40'!tag: tagString value: valueString	| inst |	inst := self newWithId.	inst tag: tagString value: valueString.	^inst! !DlAbstractUmlElement subclass: #DlMmPackage	instanceVariableNames: 'ownedElement'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!!DlMmPackage methodsFor: 'actions' stamp: 'MU 4/5/2002 17:43'!add: modelElement	^self addModelElement: modelElement! !!DlMmPackage methodsFor: 'actions' stamp: 'MU 4/5/2002 17:43'!addAll: aCollectionOfModelElement	aCollectionOfModelElement do: [:each | self add: each ].	^aCollectionOfModelElement	! !!DlMmPackage methodsFor: 'actions' stamp: 'mu 11/13/2004 02:41'!classes	^self ownedElement children select: [:each | each isClass].! !!DlMmPackage methodsFor: 'actions' stamp: 'mu 11/13/2004 02:40'!initOwnedElement	ownedElement := nil! !!DlMmPackage methodsFor: 'actions' stamp: 'mu 11/17/2004 00:38'!ownedElement	ownedElement isNil		ifTrue: [ownedElement := DlFcNamespaceOwnedElement new.			self addChild: ownedElement].	^ ownedElement! !!DlMmPackage methodsFor: 'private' stamp: 'mu 11/13/2004 02:40'!addModelElement: modelElement	modelElement isNil ifTrue: [^self].	^self ownedElement addChild: modelElement! !!DlMmPackage methodsFor: 'testing' stamp: 'MU 3/19/2002 18:11'!isPackage	^true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlMmPackage class	instanceVariableNames: ''!!DlMmPackage class methodsFor: 'constants' stamp: 'mu 11/13/2004 00:01'!defaultTagName	^'UML:Package'! !!DlMmPackage class methodsFor: 'instance creation' stamp: 'mu 11/13/2004 02:37'!name: elemName 	| inst |	inst := self newWithId.	inst elementName: elemName.	^inst	! !DlMmPackage subclass: #DlMmModel	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!!DlMmModel methodsFor: 'actions' stamp: 'MU 3/19/2002 17:44'!root	^self parent parent! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlMmModel class	instanceVariableNames: ''!!DlMmModel class methodsFor: 'constants' stamp: 'mu 11/13/2004 00:01'!defaultTagName	^'UML:Model'! !DlXmiRootElement subclass: #DlUmlRootElement	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-xmi-uml-element'!!DlUmlRootElement methodsFor: 'initialize-release' stamp: 'mu 11/17/2004 00:33'!initAsUML	self putAttributeNamed: 'xmlns:UML' value: 'org.omg.xmi.namespace.UML'.	self version: '1.2'! !!DlUmlRootElement methodsFor: 'actions' stamp: 'MU 3/18/2002 19:09'!addModel: model	^self content addChild: model! !!DlUmlRootElement methodsFor: 'actions' stamp: 'MU 3/18/2002 19:21'!addModelNamed: aModelName 	| model |	model := self content addChild: (DlMmModel name: aModelName).	^ model! !!DlUmlRootElement methodsFor: 'elements' stamp: 'MU 3/18/2002 19:08'!addModel	| model |	model := self content addChild: (DlMmModel new).	^model! !!DlUmlRootElement methodsFor: 'elements' stamp: 'MU 3/18/2002 19:10'!model	^self content findChildNamed: (DlMmModel tagName).	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlUmlRootElement class	instanceVariableNames: ''!!DlUmlRootElement class methodsFor: 'instance creation' stamp: 'MU 3/18/2002 19:13'!new	| root header |	root := super new.	header := root addHeader.	header exporter: 'Dandelion' exporterVersion: '0.5'.	header metamodel: 'UML' version: '1.3'.	root addContent.	^ root! !DlFeTagDefinition initialize!