DlIntrospectStrategy subclass: #DlAbstractAnalyzableResolveStrategy	instanceVariableNames: 'analysisStorage'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-resolve-strategy'!!DlAbstractAnalyzableResolveStrategy commentStamp: '<historical>' prior: 0!I am an abstract resolver class for DlAnalyzables."Resolve" means to examine object relationships.#creator[:masashi | ^umezawa] #version 0.1!!DlAbstractAnalyzableResolveStrategy methodsFor: 'creating elements' stamp: 'MU 4/12/2002 13:38'!createRelative: aElemBlock 	| elem resolveElem |	elem := [ aElemBlock value ] on: DlInstanceCreationFailed do:[^nil].	resolveElem := self analysisStorage find: elem.			resolveElem isNil				ifTrue: 					["second try" 					| resolveElems |					resolveElems := self analysisStorage match: elem. 					resolveElem :=  resolveElems isEmpty ifTrue: [ self analysisStorage add: elem]					ifFalse: [resolveElems first.] "Dl0.5 ignore multi matches"].	^ resolveElem.! !!DlAbstractAnalyzableResolveStrategy methodsFor: 'creating elements' stamp: 'MU 12/4/2000 01:25'!createRelatives: aElemBlock into: analyzableCol using: elemNames 	elemNames isNil ifFalse:[	elemNames do: 		[:each | | elem resolveElem |		elem := aElemBlock value: each. 				resolveElem := self analysisStorage find: elem.				resolveElem isNil					ifTrue: 						["second try" | resolveElems |						resolveElems := self analysisStorage match: elem.						resolveElems isEmpty							ifTrue: [analyzableCol add: (self analysisStorage add: elem)]							ifFalse: [analyzableCol addAll: resolveElems]]					ifFalse: 						[analyzableCol add: resolveElem]]].	^ analyzableCol.! !!DlAbstractAnalyzableResolveStrategy methodsFor: 'next resolving' stamp: 'M.U 1/3/2000 00:43'!nextResolveChangeSetOn: aDlAnalyzableChangeSet	"default do nothing"			! !!DlAbstractAnalyzableResolveStrategy methodsFor: 'next resolving' stamp: 'M.U 1/3/2000 00:41'!nextResolveClassCategoryOn: aDlAnalyzableClassCategory 	"default do nothing"			! !!DlAbstractAnalyzableResolveStrategy methodsFor: 'next resolving' stamp: 'M.U 1/3/2000 00:41'!nextResolveClassOn: aDlAnalyzableClass 	"default do nothing"			! !!DlAbstractAnalyzableResolveStrategy methodsFor: 'next resolving' stamp: 'M.U 1/3/2000 00:41'!nextResolveGlobalRootOn: aDlAnalyzableGlobalRoot 	"default do nothing"			! !!DlAbstractAnalyzableResolveStrategy methodsFor: 'next resolving' stamp: 'M.U 1/3/2000 00:42'!nextResolveGlobalVariableOn: aDlAnalyzableGlobalVariable 	"default do nothing"			! !!DlAbstractAnalyzableResolveStrategy methodsFor: 'next resolving' stamp: 'M.U 1/3/2000 02:10'!nextResolveLocalScopeVariableOn: aDlAnalyzableLocalScopeVariable	"default do nothing"			! !!DlAbstractAnalyzableResolveStrategy methodsFor: 'next resolving' stamp: 'M.U 1/3/2000 00:42'!nextResolveMethodCategoryOn: aDlAnalyzableMethodCategory 	"default do nothing"			! !!DlAbstractAnalyzableResolveStrategy methodsFor: 'next resolving' stamp: 'M.U 1/3/2000 00:42'!nextResolveMethodOn: aDlAnalyzableMethod 	"default do nothing"			! !!DlAbstractAnalyzableResolveStrategy methodsFor: 'next resolving' stamp: 'M.U 1/3/2000 00:15'!nextResolveOn: aDlAnalyzable 	"default do nothing"			! !!DlAbstractAnalyzableResolveStrategy methodsFor: 'next resolving' stamp: 'M.U 1/3/2000 00:42'!nextResolvePoolOn: aDlAnalyzablePool 	"default do nothing"			! !!DlAbstractAnalyzableResolveStrategy methodsFor: 'next resolving' stamp: 'M.U 1/3/2000 00:42'!nextResolvePoolVariableOn: aDlAnalyzablePoolVariable 	"default do nothing"			! !!DlAbstractAnalyzableResolveStrategy methodsFor: 'factory' stamp: 'M.U 1/30/2000 21:06'!defaultAnalyzableCollection	^DlSortedSet new! !!DlAbstractAnalyzableResolveStrategy methodsFor: 'accessing' stamp: 'M.U 1/10/2000 22:57'!analysisStorage	^analysisStorage! !!DlAbstractAnalyzableResolveStrategy methodsFor: 'accessing' stamp: 'M.U 1/10/2000 22:57'!analysisStorage: aValue	analysisStorage := aValue! !!DlAbstractAnalyzableResolveStrategy methodsFor: 'private' stamp: 'M.U 1/26/2000 00:30'!resolveMoreAll: aCollectionOfDlAnalyzable	aCollectionOfDlAnalyzable do: [:each | each resolveMoreBy: self].	! !!DlAbstractAnalyzableResolveStrategy methodsFor: 'private' stamp: 'M.U 1/26/2000 00:30'!resolveRelativesAll: aCollectionOfDlAnalyzable	aCollectionOfDlAnalyzable do: [:each | each resolveRelativesBy: self].	! !DlAbstractAnalyzableResolveStrategy subclass: #DlAnalyzableAllResolveStrategy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-resolve-strategy'!!DlAnalyzableAllResolveStrategy commentStamp: '<historical>' prior: 0!I resolve one direct parent and all children.#creator[:masashi | ^umezawa] #version 0.1!!DlAnalyzableAllResolveStrategy methodsFor: 'actions' stamp: 'MU 7/2/2000 21:54'!nextResolveChangeSetOn: aDlAnalyzableChangeSet	| classes methods |	methods := self defaultAnalyzableCollection.	methods addAll: aDlAnalyzableChangeSet addedInstMethods.	methods addAll: aDlAnalyzableChangeSet changedInstMethods.	methods addAll: aDlAnalyzableChangeSet addedThenRemovedInstMethods.	methods addAll: aDlAnalyzableChangeSet removedInstMethods.	methods addAll: aDlAnalyzableChangeSet addedClassMethods.	methods addAll: aDlAnalyzableChangeSet changedClassMethods.	methods addAll: aDlAnalyzableChangeSet addedThenRemovedClassMethods.	methods addAll: aDlAnalyzableChangeSet removedClassMethods.	methods do: [:each | each isStorable: true. each storeTo: self analysisStorage].		classes := self defaultAnalyzableCollection.	classes addAll: aDlAnalyzableChangeSet addedClasses.	classes addAll: aDlAnalyzableChangeSet changedClasses.	classes do: [:each | each isStorable: true. each storeTo: self analysisStorage].	self resolveMoreAll: methods.	self resolveMoreAll: classes.! !!DlAnalyzableAllResolveStrategy methodsFor: 'actions' stamp: 'M.U 1/3/2000 17:34'!nextResolveClassCategoryOn: aDlAnalyzableClassCategory 		self resolveMoreAll:  aDlAnalyzableClassCategory classes.		! !!DlAnalyzableAllResolveStrategy methodsFor: 'actions' stamp: 'M.U 1/10/2000 23:28'!nextResolveClassOn: aDlAnalyzableClass 	(aDlAnalyzableClass isResolveStarter)		ifTrue: [aDlAnalyzableClass category resolveRelativesBy: self].	self resolveMoreAll: aDlAnalyzableClass instMethodCategories.	self resolveMoreAll: aDlAnalyzableClass classMethodCategories.	self resolveMoreAll: aDlAnalyzableClass instVariables.	self resolveMoreAll: aDlAnalyzableClass classVariables.	self resolveMoreAll: aDlAnalyzableClass classInstVariables.! !!DlAnalyzableAllResolveStrategy methodsFor: 'actions' stamp: 'M.U 1/3/2000 17:36'!nextResolveGlobalRootOn: aDlAnalyzableGlobalRoot 	self resolveMoreAll: aDlAnalyzableGlobalRoot globalVariables.	self resolveMoreAll: aDlAnalyzableGlobalRoot pools.				! !!DlAnalyzableAllResolveStrategy methodsFor: 'actions' stamp: 'M.U 1/10/2000 23:28'!nextResolveLocalScopeVariableOn: aDlAnalyzableLocalScopeVariable	(aDlAnalyzableLocalScopeVariable isResolveStarter)		ifTrue: [aDlAnalyzableLocalScopeVariable klass resolveRelativesBy: self].			! !!DlAnalyzableAllResolveStrategy methodsFor: 'actions' stamp: 'M.U 1/10/2000 23:28'!nextResolveMethodCategoryOn: aDlAnalyzableMethodCategory 	(aDlAnalyzableMethodCategory isResolveStarter)		ifTrue: [aDlAnalyzableMethodCategory klass resolveRelativesBy: self].	self resolveMoreAll: aDlAnalyzableMethodCategory methods.					! !!DlAnalyzableAllResolveStrategy methodsFor: 'actions' stamp: 'M.U 1/10/2000 23:29'!nextResolveMethodOn: aDlAnalyzableMethod 	(aDlAnalyzableMethod isResolveStarter)		ifTrue: [aDlAnalyzableMethod category resolveRelativesBy: self].							! !!DlAnalyzableAllResolveStrategy methodsFor: 'actions' stamp: 'M.U 1/10/2000 23:29'!nextResolvePoolOn: aDlAnalyzablePool 	aDlAnalyzablePool isResolveStarter ifTrue: [aDlAnalyzablePool globalRoot resolveRelativesBy: self].	self resolveMoreAll: aDlAnalyzablePool poolVariables.	self shouldNextResolvePoolReferringClasses ifTrue: [self resolveMoreAll: aDlAnalyzablePool referringClasses].! !!DlAnalyzableAllResolveStrategy methodsFor: 'testing' stamp: 'M.U 1/3/2000 18:55'!shouldNextResolvePoolReferringClasses	^self properties at: #nextResolvePoolReferringClasses! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlAnalyzableAllResolveStrategy class	instanceVariableNames: ''!!DlAnalyzableAllResolveStrategy class methodsFor: 'property' stamp: 'MU 3/16/2000 01:00'!defaultProperties	^super defaultProperties		at: #nextResolvePoolReferringClasses put: false;		yourself.! !DlAbstractAnalyzableResolveStrategy subclass: #DlChangeSetResolveStrategy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-resolve-strategy'!!DlChangeSetResolveStrategy commentStamp: '<historical>' prior: 0!I resolve changeSet children.#creator[:masashi | ^umezawa] #version 0.1!!DlChangeSetResolveStrategy methodsFor: 'next resolving' stamp: 'mu 1/1/2001 00:57'!nextResolveChangeSetOn: aDlAnalyzableChangeSet	| classes methods |	classes := self defaultAnalyzableCollection.	classes addAll: aDlAnalyzableChangeSet addedClasses.	classes addAll: aDlAnalyzableChangeSet changedClasses.	classes addAll: aDlAnalyzableChangeSet removedClasses.	classes addAll: aDlAnalyzableChangeSet addedThenRemovedClasses.	classes do: [:each | each isStorable: true. each storeTo: self analysisStorage].		methods := self defaultAnalyzableCollection.	methods addAll: aDlAnalyzableChangeSet addedInstMethods.	methods addAll: aDlAnalyzableChangeSet changedInstMethods.	methods addAll: aDlAnalyzableChangeSet addedThenRemovedInstMethods.	methods addAll: aDlAnalyzableChangeSet removedInstMethods.	methods addAll: aDlAnalyzableChangeSet addedClassMethods.	methods addAll: aDlAnalyzableChangeSet changedClassMethods.	methods addAll: aDlAnalyzableChangeSet addedThenRemovedClassMethods.	methods addAll: aDlAnalyzableChangeSet removedClassMethods.	methods do: [:each | each isStorable: true. each storeTo: self analysisStorage].		self resolveMoreAll: classes.	self resolveMoreAll: methods.								! !!DlChangeSetResolveStrategy methodsFor: 'next resolving' stamp: 'MU 1/31/2000 01:14'!nextResolveClassOn: aDlAnalyzableClass 	aDlAnalyzableClass category isNil		ifFalse: [aDlAnalyzableClass category isResolved ifFalse: [aDlAnalyzableClass category resolveRelativesBy: self]].	self resolveRelativesAll: aDlAnalyzableClass instMethodCategories.	self resolveRelativesAll: aDlAnalyzableClass classMethodCategories.	self resolveMoreAll: aDlAnalyzableClass instVariables.	self resolveMoreAll: aDlAnalyzableClass classVariables.	self resolveMoreAll: aDlAnalyzableClass classInstVariables.! !!DlChangeSetResolveStrategy methodsFor: 'next resolving' stamp: 'MU 1/31/2000 01:12'!nextResolveMethodOn: aDlAnalyzableMethod 	aDlAnalyzableMethod category isNil ifFalse: [aDlAnalyzableMethod category resolveRelativesBy: self].	aDlAnalyzableMethod klass isNil		ifFalse: [aDlAnalyzableMethod klass isResolved ifFalse: [aDlAnalyzableMethod klass resolveMoreBy: self]].! !