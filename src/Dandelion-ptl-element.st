Object subclass: #DlPetalElement	instanceVariableNames: 'name'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-ptl-element'!!DlPetalElement commentStamp: '<historical>' prior: 0!I am an abstract meta object class for Petal generation.#creator[:masashi | ^umezawa] #version 0.1!!DlPetalElement methodsFor: 'initialize-release' stamp: 'MU 8/13/2000 23:37'!initialize	"default do nothing"! !!DlPetalElement methodsFor: 'printing-petal' stamp: 'mu 5/24/2001 23:10'!petalString	| aStream |	aStream := WriteStream on: String new.	self printPetalOn: aStream.	^aStream contents.! !!DlPetalElement methodsFor: 'printing-petal' stamp: 'MU 8/13/2000 23:39'!printOn: aStream	super printOn: aStream "for Debug"	"self printPetalOn: aStream"! !!DlPetalElement methodsFor: 'printing-petal' stamp: 'MU 9/3/2000 00:28'!printPetalContentsOn: aDlPetalWriteStream	"default do nothing"	self subclassResponsibility	! !!DlPetalElement methodsFor: 'printing-petal' stamp: 'MU 8/14/2000 00:01'!printPetalFooterOn: aDlPetalWriteStream	aDlPetalWriteStream parenEnd.! !!DlPetalElement methodsFor: 'printing-petal' stamp: 'MU 8/27/2000 02:24'!printPetalHeaderOn: aDlPetalWriteStream 	aDlPetalWriteStream cr.	aDlPetalWriteStream paren.	self class elementKind isEmpty ifFalse: [aDlPetalWriteStream nextPutAll: self class elementKind].	self class elementName isEmpty		ifFalse: 			[aDlPetalWriteStream tab.			aDlPetalWriteStream nextPutAll: self class elementName.			self name isEmpty				ifFalse: 					[aDlPetalWriteStream tab.					aDlPetalWriteStream quote: self name]].! !!DlPetalElement methodsFor: 'printing-petal' stamp: 'MU 8/19/2000 21:10'!printPetalOn: aDlPetalWriteStream 	| wStr |	wStr := aDlPetalWriteStream class == DlPetalWriteStream				ifTrue: [wStr := aDlPetalWriteStream]				ifFalse: [DlPetalWriteStream wrap: aDlPetalWriteStream].	self printPetalOn: wStr indent: 0 ! !!DlPetalElement methodsFor: 'printing-petal' stamp: 'MU 8/27/2000 02:23'!printPetalOn: aDlPetalWriteStream indent: level	aDlPetalWriteStream indentDepth: level.	self printPetalHeaderOn: aDlPetalWriteStream.	aDlPetalWriteStream incIndent.	self printPetalContentsOn: aDlPetalWriteStream.	aDlPetalWriteStream decIndent.	self printPetalFooterOn: aDlPetalWriteStream.	! !!DlPetalElement methodsFor: 'accessing' stamp: 'M.U 5/17/1999 00:25'!name	name isNil ifTrue:[ name := ''].	^name! !!DlPetalElement methodsFor: 'accessing' stamp: 'M.U 5/17/1999 00:23'!name: aValue	name := aValue! !!DlPetalElement methodsFor: 'comparing' stamp: 'MU 9/17/2000 23:46'!= aDlPetalElement	^self name = aDlPetalElement name! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlPetalElement class	instanceVariableNames: ''!!DlPetalElement class methodsFor: 'instance creation' stamp: 'MU 8/27/2000 01:21'!named: aName	^self new name: aName! !!DlPetalElement class methodsFor: 'instance creation' stamp: 'M.U 5/17/1999 00:22'!new	^super new initialize! !!DlPetalElement class methodsFor: 'constants' stamp: 'M.U 6/6/1999 23:56'!elementKind	^''! !!DlPetalElement class methodsFor: 'constants' stamp: 'M.U 6/6/1999 23:57'!elementName	^''! !DlPetalElement subclass: #DlPetalObject	instanceVariableNames: 'container attributes quid stereotype documentation'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-ptl-element'!!DlPetalObject commentStamp: '<historical>' prior: 0!I represent an object-like Petal element (i.e. not primitive type).#creator[:masashi | ^umezawa] #version 0.1!!DlPetalObject methodsFor: 'initialize-release' stamp: 'MU 8/25/2000 01:53'!initialize	container := nil! !!DlPetalObject methodsFor: 'actions' stamp: 'MU 9/2/2000 23:52'!fullName	| nm con |	nm := self name.	con := self container.	[con isNil] whileFalse:[ nm := con name, '::', nm. con := con container ].	^nm! !!DlPetalObject methodsFor: 'actions' stamp: 'MU 9/2/2000 23:42'!isRootContained	| con |	con := self container.	[con isNil]		whileFalse: [con isRoot ifTrue: [^ true]].	^ false.! !!DlPetalObject methodsFor: 'accessing-PetalElement' stamp: 'MU 8/25/2000 01:53'!container	^container! !!DlPetalObject methodsFor: 'accessing-PetalElement' stamp: 'MU 8/25/2000 01:53'!container: aValue	container := aValue! !!DlPetalObject methodsFor: 'accessing' stamp: 'MU 9/17/2000 23:20'!attributes	attributes isNil ifTrue:[ attributes := OrderedCollection new. ].	^attributes! !!DlPetalObject methodsFor: 'accessing' stamp: 'MU 9/17/2000 23:04'!attributes: aValue	attributes := aValue! !!DlPetalObject methodsFor: 'accessing' stamp: 'MU 8/27/2000 01:25'!documentation	documentation isNil ifTrue:[ documentation := ''. ].	^documentation! !!DlPetalObject methodsFor: 'accessing' stamp: 'MU 8/27/2000 01:26'!documentation: aValue	documentation := aValue! !!DlPetalObject methodsFor: 'accessing' stamp: 'M.U 6/7/1999 00:00'!quid	quid isNil ifTrue:[ quid := self defaultQuidMaker nextValue. ].	^quid! !!DlPetalObject methodsFor: 'accessing' stamp: 'M.U 6/6/1999 23:58'!quid: aValue	quid := aValue! !!DlPetalObject methodsFor: 'accessing' stamp: 'MU 9/2/2000 23:30'!stereotype	stereotype isNil ifTrue:[ stereotype := ''. ].	^stereotype! !!DlPetalObject methodsFor: 'accessing' stamp: 'MU 9/2/2000 23:30'!stereotype: aValue	stereotype := aValue! !!DlPetalObject methodsFor: 'factory' stamp: 'M.U 6/6/1999 23:59'!defaultQuidMaker	^DlPetalQuidMaker default! !!DlPetalObject methodsFor: 'factory' stamp: 'MU 8/25/2000 01:33'!defaultUnnamedCounter	^DlPetalUnnamedCounter default! !!DlPetalObject methodsFor: 'printing-petal' stamp: 'MU 9/17/2000 23:19'!printPetalContentsOn: aDlPetalWriteStream	aDlPetalWriteStream crKey: 'attributes' type: 'Attribute_Set' list: self attributes.	aDlPetalWriteStream crKey: 'quid' value: self quid.	aDlPetalWriteStream crKey: 'documentation' value: self documentation.	aDlPetalWriteStream crKey: 'stereotype' value: self stereotype.	! !!DlPetalObject methodsFor: 'comparing' stamp: 'MU 9/17/2000 23:50'!= aDlPetalAttribute 	^ super = aDlPetalAttribute		and: [ self quid = aDlPetalAttribute quid].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlPetalObject class	instanceVariableNames: ''!!DlPetalObject class methodsFor: 'constants' stamp: 'M.U 5/17/1999 00:09'!elementKind	^'object'! !DlPetalObject subclass: #DlPetalAssociation	instanceVariableNames: 'roles'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-ptl-element'!!DlPetalAssociation commentStamp: '<historical>' prior: 0!I represent a Petal Association element.#creator[:masashi | ^umezawa] #version 0.1!!DlPetalAssociation methodsFor: 'actions' stamp: 'MU 9/18/2000 00:50'!addRole: aDlPetalRole	self roles size > 2 ifTrue:[ self error: 'Association cannot have more than two roles!!'].	aDlPetalRole container: self.	self roles add: aDlPetalRole! !!DlPetalAssociation methodsFor: 'actions' stamp: 'MU 9/18/2000 01:38'!name	name isNil ifTrue: [name := self defaultUnnamedCounter nextUnnamedString].	^ name! !!DlPetalAssociation methodsFor: 'actions' stamp: 'MU 9/18/2000 00:51'!roleA: aDlPetalRoleA roleB: aDlPetalRoleB	self addRole: aDlPetalRoleA.	self addRole: aDlPetalRoleB! !!DlPetalAssociation methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:27'!roles	roles isNil ifTrue:[ roles := OrderedCollection new.].	^roles! !!DlPetalAssociation methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:27'!roles: aValue	roles := aValue! !!DlPetalAssociation methodsFor: 'printing-petal' stamp: 'MU 10/9/2000 02:26'!printPetalContentsOn: aDlPetalWriteStream	super printPetalContentsOn: aDlPetalWriteStream.	aDlPetalWriteStream crKey: 'roles' type: 'role_list' list: self roles.		 ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlPetalAssociation class	instanceVariableNames: ''!!DlPetalAssociation class methodsFor: 'instance creation' stamp: 'MU 9/26/2000 23:26'!from: aDlPetalClassA fromRoleName: aFromRoleName to: aDlPetalClassB toRoleName: aToRoleName	| roleA roleB |	roleA := DlPetalRole on: aDlPetalClassA.	roleA isNavigable: false.	roleA name: aFromRoleName.	roleB := DlPetalRole on: aDlPetalClassB.	roleB name: aToRoleName.	^self roleA: roleA roleB: roleB.	! !!DlPetalAssociation class methodsFor: 'instance creation' stamp: 'MU 10/9/2000 02:29'!from: aDlPetalClassA to: aDlPetalClassB toRoleName: aToRoleName	^self from: aDlPetalClassA fromRoleName: nil to: aDlPetalClassB toRoleName: aToRoleName	! !!DlPetalAssociation class methodsFor: 'instance creation' stamp: 'MU 9/18/2000 01:34'!roleA: aDlPetalRoleA roleB: aDlPetalRoleB 	^ self new roleA: aDlPetalRoleA roleB: aDlPetalRoleB! !!DlPetalAssociation class methodsFor: 'constants' stamp: 'MU 9/18/2000 01:53'!elementName	^'Association'! !DlPetalObject subclass: #DlPetalAttribute	instanceVariableNames: 'tool value'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-ptl-element'!!DlPetalAttribute commentStamp: '<historical>' prior: 0!I represent a Petal Attribute element. (not ClassAttribute - Petal has really confusing name)Normally Petal Attribute is used for adding some additional infomation in Petal file. #creator[:masashi | ^umezawa] #version 0.1!!DlPetalAttribute methodsFor: 'accessing' stamp: 'MU 9/3/2000 00:18'!tool	tool isNil ifTrue:[ tool := OrderedCollection new.].	^tool! !!DlPetalAttribute methodsFor: 'accessing' stamp: 'MU 9/3/2000 00:18'!tool: aValue	tool := aValue! !!DlPetalAttribute methodsFor: 'accessing' stamp: 'MU 9/3/2000 00:18'!value	value isNil ifTrue:[ value := OrderedCollection new.].	^value! !!DlPetalAttribute methodsFor: 'accessing' stamp: 'MU 9/3/2000 00:18'!value: aValue	value := aValue! !!DlPetalAttribute methodsFor: 'printing' stamp: 'MU 9/3/2000 00:55'!printPetalHeaderOn: aDlPetalWriteStream 	aDlPetalWriteStream cr.	aDlPetalWriteStream paren.	aDlPetalWriteStream nextPutAll: self class elementKind.	aDlPetalWriteStream tab.	aDlPetalWriteStream nextPutAll: self class elementName.	! !!DlPetalAttribute methodsFor: 'printing-petal' stamp: 'MU 10/2/2000 00:19'!printPetalContentsOn: aDlPetalWriteStream	aDlPetalWriteStream crKey: 'tool' value: self tool.	aDlPetalWriteStream crKey: 'name' value: self name.	aDlPetalWriteStream crKey: 'value' value: self value ! !!DlPetalAttribute methodsFor: 'comparing' stamp: 'MU 9/17/2000 23:52'!= aDlPetalAttribute 	^ self name = aDlPetalAttribute name		and: [tool = aDlPetalAttribute tool and: [self value = aDlPetalAttribute value]]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlPetalAttribute class	instanceVariableNames: 'classOperationAttribute'!!DlPetalAttribute class methodsFor: 'instance creation' stamp: 'MU 9/3/2000 00:46'!tool: aTool name: aName value: aValue	| inst |	inst := self named: aName.	inst tool: aTool.	inst value: aValue.	^inst! !!DlPetalAttribute class methodsFor: 'constants' stamp: 'MU 9/3/2000 00:52'!elementName	^'Attribute'! !!DlPetalAttribute class methodsFor: 'utility' stamp: 'MU 9/17/2000 23:56'!classOperationAttribute	"for indicating class operation"	classOperationAttribute isNil ifTrue: [classOperationAttribute := self					tool: 'cg'					name: 'OperationType'					value: DlPetalPrimitiveValue classOperationValue].	^ classOperationAttribute! !DlPetalObject subclass: #DlPetalClass	instanceVariableNames: 'classCategory operations classAttributes superklasses realizedInterfaces language roles'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-ptl-element'!!DlPetalClass commentStamp: '<historical>' prior: 0!I represent a Petal Class element.#creator[:masashi | ^umezawa] #version 0.1!!DlPetalClass methodsFor: 'actions' stamp: 'MU 8/27/2000 01:16'!addClassAttribute: aDlPetalClassAttribute	aDlPetalClassAttribute container: self.	self classAttributes add: aDlPetalClassAttribute! !!DlPetalClass methodsFor: 'actions' stamp: 'MU 8/27/2000 01:17'!addOperation: aDlPetalOperation	aDlPetalOperation container: self.	self operations add: aDlPetalOperation! !!DlPetalClass methodsFor: 'actions' stamp: 'MU 9/26/2000 23:35'!addRole: aDlPetalRole	aDlPetalRole container: self.	self roles add: aDlPetalRole! !!DlPetalClass methodsFor: 'actions' stamp: 'MU 10/6/2000 23:50'!addSuperclass: aDlPetalClass	self superklasses add: (DlPetalInheritanceRelationship to: aDlPetalClass)! !!DlPetalClass methodsFor: 'actions' stamp: 'MU 10/9/2000 00:40'!addUnidirectionalAssociationTo: aDlPetalClass roleNamed: aToRoleName 	| assoc |	assoc := DlPetalAssociation				from: self				to: aDlPetalClass				toRoleName: aToRoleName.	self container isNil ifTrue: [self beInUnresolvedCategory].	self container addAssociation: assoc! !!DlPetalClass methodsFor: 'actions' stamp: 'mu 12/31/2000 01:10'!beInRemovedCategory	^DlPetalClassCategory removed addClass: self! !!DlPetalClass methodsFor: 'actions' stamp: 'mu 12/31/2000 00:34'!beInUnresolvedCategory	^DlPetalClassCategory unresolved addClass: self! !!DlPetalClass methodsFor: 'actions' stamp: 'MU 10/9/2000 12:11'!removeClassAttribute: aDlPetalClassAttribute	aDlPetalClassAttribute container: nil.	self classAttributes remove: aDlPetalClassAttribute! !!DlPetalClass methodsFor: 'accessing' stamp: 'MU 8/19/2000 20:53'!classAttributes	classAttributes isNil ifTrue:[ classAttributes := OrderedCollection new.].	^classAttributes! !!DlPetalClass methodsFor: 'accessing' stamp: 'MU 8/19/2000 20:53'!classAttributes: aValue	classAttributes := aValue! !!DlPetalClass methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:01'!language	language isNil ifTrue:[ language := 'Smalltalk'.].	^language! !!DlPetalClass methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:01'!language: aValue	language := aValue! !!DlPetalClass methodsFor: 'accessing' stamp: 'MU 8/19/2000 20:53'!operations	operations isNil ifTrue:[ operations := OrderedCollection new.].	^operations! !!DlPetalClass methodsFor: 'accessing' stamp: 'MU 8/19/2000 20:53'!operations: aValue	operations := aValue! !!DlPetalClass methodsFor: 'accessing' stamp: 'MU 10/6/2000 23:08'!realizedInterfaces	realizedInterfaces isNil ifTrue:[ realizedInterfaces := OrderedCollection new.].	^realizedInterfaces! !!DlPetalClass methodsFor: 'accessing' stamp: 'MU 10/6/2000 23:08'!realizedInterfaces: aValue	realizedInterfaces := aValue! !!DlPetalClass methodsFor: 'accessing' stamp: 'MU 9/26/2000 23:32'!roles	roles isNil ifTrue:[ roles := Set new.].	^roles! !!DlPetalClass methodsFor: 'accessing' stamp: 'MU 9/26/2000 23:31'!roles: aValue	roles := aValue! !!DlPetalClass methodsFor: 'accessing' stamp: 'MU 9/30/2000 23:25'!superklasses	superklasses isNil ifTrue:[ superklasses := OrderedCollection new.].	^superklasses! !!DlPetalClass methodsFor: 'accessing' stamp: 'MU 9/30/2000 23:26'!superklasses: aValue	superklasses := aValue! !!DlPetalClass methodsFor: 'printing-petal' stamp: 'MU 10/7/2000 01:14'!printPetalContentsOn: aDlPetalWriteStream	super printPetalContentsOn: aDlPetalWriteStream.	aDlPetalWriteStream crKey: 'superclasses' type: 'inheritance_relationship_list' list: self superklasses.	aDlPetalWriteStream crKey: 'realized_interfaces' type: 'realize_rel_list' list: self realizedInterfaces.	aDlPetalWriteStream crKey: 'operations' type: 'Operations' list: self operations.	aDlPetalWriteStream crKey: 'class_attributes' type: 'class_attribute_list' list: self classAttributes.	aDlPetalWriteStream crKey: 'language' value: self language.		 ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlPetalClass class	instanceVariableNames: ''!!DlPetalClass class methodsFor: 'constants' stamp: 'MU 8/25/2000 01:44'!elementName	^'Class'! !DlPetalObject subclass: #DlPetalClassAttribute	instanceVariableNames: 'type initv exportControl static'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-ptl-element'!!DlPetalClassAttribute commentStamp: '<historical>' prior: 0!I represent a Petal ClassAttribute element. (Class fields)#creator[:masashi | ^umezawa] #version 0.1!!DlPetalClassAttribute methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:03'!exportControl	exportControl isNil ifTrue:[ exportControl := 'Protected'. ].	^exportControl! !!DlPetalClassAttribute methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:02'!exportControl: aValue	exportControl := aValue! !!DlPetalClassAttribute methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:04'!initv	initv isNil ifTrue:[ initv := ''.].	^initv! !!DlPetalClassAttribute methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:02'!initv: aValue	initv := aValue! !!DlPetalClassAttribute methodsFor: 'accessing' stamp: 'MU 8/27/2000 00:36'!static	static isNil ifTrue:[ static := ''.].	^static! !!DlPetalClassAttribute methodsFor: 'accessing' stamp: 'MU 8/27/2000 00:37'!static: aValue	static := aValue! !!DlPetalClassAttribute methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:04'!type	type isNil ifTrue:[ type := ''.].	^type! !!DlPetalClassAttribute methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:02'!type: aValue	type := aValue! !!DlPetalClassAttribute methodsFor: 'printing-petal' stamp: 'MU 10/2/2000 00:19'!printPetalContentsOn: aDlPetalWriteStream	super printPetalContentsOn: aDlPetalWriteStream.	aDlPetalWriteStream crKey: 'type' value: self type.	aDlPetalWriteStream crKey: 'initv' value: self initv asString. "need to be String"	aDlPetalWriteStream crKey: 'exportControl' value: self exportControl.	aDlPetalWriteStream crKey: 'static' value: self static.! !!DlPetalClassAttribute methodsFor: 'actions' stamp: 'MU 9/17/2000 22:59'!beStatic	self static: true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlPetalClassAttribute class	instanceVariableNames: ''!!DlPetalClassAttribute class methodsFor: 'instance creation' stamp: 'MU 9/3/2000 00:05'!named: aName type: aType	^self named: aName type: aType initv: 'nil'! !!DlPetalClassAttribute class methodsFor: 'instance creation' stamp: 'MU 9/3/2000 00:01'!named: aName type: aType initv: anInitValue	^self named: aName type: aType initv: anInitValue exportControl: 'Protected'! !!DlPetalClassAttribute class methodsFor: 'instance creation' stamp: 'MU 9/3/2000 00:00'!named: aName type: aType initv: anInitValue exportControl: anExportControl	^self named: aName type: aType initv: anInitValue exportControl: anExportControl static: false! !!DlPetalClassAttribute class methodsFor: 'instance creation' stamp: 'MU 9/3/2000 00:00'!named: aName type: aType initv: anInitValue exportControl: anExportControl static: staticOrNot	| inst |	inst := self named: aName.	inst type: aType.	inst initv: anInitValue.	inst exportControl: anExportControl.	inst static: staticOrNot.	^inst ! !!DlPetalClassAttribute class methodsFor: 'constants' stamp: 'MU 8/25/2000 01:45'!elementName	^'ClassAttribute'! !DlPetalObject subclass: #DlPetalClassCategory	instanceVariableNames: 'isRoot exportControl classes associations categories'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-ptl-element'!!DlPetalClassCategory commentStamp: '<historical>' prior: 0!I represent a Petal ClassCategory.#creator[:masashi | ^umezawa] #version 0.1!!DlPetalClassCategory methodsFor: 'initialize-release' stamp: 'MU 10/7/2000 00:31'!initialize	isRoot := false.	exportControl := classes := associations := categories.! !!DlPetalClassCategory methodsFor: 'accessing' stamp: 'MU 8/19/2000 20:33'!associations	associations isNil ifTrue:[ associations := OrderedCollection new.].	^associations! !!DlPetalClassCategory methodsFor: 'accessing' stamp: 'MU 8/19/2000 20:33'!associations: aValue	associations := aValue! !!DlPetalClassCategory methodsFor: 'accessing' stamp: 'MU 8/27/2000 00:42'!categories	categories isNil ifTrue:[ categories := OrderedCollection new.].	^categories! !!DlPetalClassCategory methodsFor: 'accessing' stamp: 'MU 8/27/2000 00:42'!categories: aValue	categories := aValue! !!DlPetalClassCategory methodsFor: 'accessing' stamp: 'MU 8/19/2000 20:33'!classes	classes isNil ifTrue:[ classes := OrderedCollection new.].	^classes! !!DlPetalClassCategory methodsFor: 'accessing' stamp: 'MU 8/19/2000 20:33'!classes: aValue	classes := aValue! !!DlPetalClassCategory methodsFor: 'accessing' stamp: 'MU 8/19/2000 20:26'!exportControl	exportControl isNil ifTrue:[ exportControl := 'Public'. ].	^exportControl! !!DlPetalClassCategory methodsFor: 'accessing' stamp: 'M.U 6/7/1999 00:01'!exportControl: aValue	exportControl := aValue! !!DlPetalClassCategory methodsFor: 'accessing' stamp: 'MU 8/27/2000 00:53'!isRoot	^isRoot! !!DlPetalClassCategory methodsFor: 'accessing' stamp: 'MU 8/27/2000 00:54'!isRoot: aValue	isRoot := aValue! !!DlPetalClassCategory methodsFor: 'actions' stamp: 'MU 8/27/2000 01:10'!addAssociation: aDlPetalAssociation	aDlPetalAssociation container: self.	self associations add: aDlPetalAssociation! !!DlPetalClassCategory methodsFor: 'actions' stamp: 'MU 9/2/2000 23:33'!addCategory: aDlPetalAssociation	aDlPetalAssociation container: self.	self categories add: aDlPetalAssociation! !!DlPetalClassCategory methodsFor: 'actions' stamp: 'MU 8/27/2000 01:09'!addClass: aDlPetalClass	aDlPetalClass container: self.	self classes add: aDlPetalClass! !!DlPetalClassCategory methodsFor: 'actions' stamp: 'MU 9/2/2000 23:48'!fullName	^ (self isRootContained or: [self isRoot])		ifTrue: [super fullName]		ifFalse: [self class defaultRootName , '::' , super fullName].! !!DlPetalClassCategory methodsFor: 'actions' stamp: 'MU 8/27/2000 01:01'!isRootContained	| con |	con := self container.	[con isNil]		whileFalse: [con isRoot ifTrue: [^ true]].	^ false.! !!DlPetalClassCategory methodsFor: 'actions' stamp: 'MU 8/27/2000 00:42'!logicalModels	^self classes, self associations, self categories! !!DlPetalClassCategory methodsFor: 'printing-petal' stamp: 'MU 9/3/2000 00:39'!printPetalContentsOn: aDlPetalWriteStream	super printPetalContentsOn: aDlPetalWriteStream.	aDlPetalWriteStream crKey: 'exportControl' value: self exportControl.	aDlPetalWriteStream crKey: 'logical_models' type: 'unit_reference_list' list: self logicalModels.	 ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlPetalClassCategory class	instanceVariableNames: 'unresolved removed'!!DlPetalClassCategory class methodsFor: 'class initialization' stamp: 'mu 12/31/2000 00:35'!initialize	unresolved := removed := nil! !!DlPetalClassCategory class methodsFor: 'instance creation' stamp: 'mu 12/31/2000 00:46'!removed	removed isNil ifTrue:[removed := self new name: (self defaultRemovedName)].	^removed	! !!DlPetalClassCategory class methodsFor: 'instance creation' stamp: 'MU 8/27/2000 01:22'!root	^self rootNamed: self defaultRootName! !!DlPetalClassCategory class methodsFor: 'instance creation' stamp: 'MU 8/27/2000 01:22'!rootNamed: aName	^self new name: aName; isRoot: true! !!DlPetalClassCategory class methodsFor: 'instance creation' stamp: 'MU 10/7/2000 00:19'!unresolved	unresolved isNil ifTrue:[unresolved := self new name: (self defaultUnresolvedName)].	^unresolved	! !!DlPetalClassCategory class methodsFor: 'constants' stamp: 'mu 12/31/2000 00:46'!defaultRemovedName	^'Removed'! !!DlPetalClassCategory class methodsFor: 'constants' stamp: 'MU 8/27/2000 01:23'!defaultRootName	^'Logical View'! !!DlPetalClassCategory class methodsFor: 'constants' stamp: 'MU 10/7/2000 00:09'!defaultUnresolvedName	^'Unresolved'! !!DlPetalClassCategory class methodsFor: 'constants' stamp: 'MU 8/25/2000 01:44'!elementName	^'Class_Category'! !DlPetalObject subclass: #DlPetalHeader	instanceVariableNames: 'version written charSet'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-ptl-element'!!DlPetalHeader commentStamp: '<historical>' prior: 0!I represent a Petal Header element.#creator[:masashi | ^umezawa] #version 0.1!!DlPetalHeader methodsFor: 'accessing' stamp: 'M.U 6/6/1999 00:08'!charSet	charSet isNil ifTrue:[ charSet := 128. ].	^charSet! !!DlPetalHeader methodsFor: 'accessing' stamp: 'M.U 6/5/1999 23:39'!charSet: aValue	charSet := aValue! !!DlPetalHeader methodsFor: 'accessing' stamp: 'M.U 6/6/1999 00:08'!version	version isNil ifTrue:[ version := 42. ].	^version! !!DlPetalHeader methodsFor: 'accessing' stamp: 'M.U 6/5/1999 23:39'!version: aValue	version := aValue! !!DlPetalHeader methodsFor: 'accessing' stamp: 'MU 9/29/2000 00:31'!written	written isNil ifTrue:[ written := 'Dandelion ', DlDandelionSystem version. ].	^written! !!DlPetalHeader methodsFor: 'accessing' stamp: 'M.U 6/5/1999 23:39'!written: aValue	written := aValue! !!DlPetalHeader methodsFor: 'printing-petal' stamp: 'MU 10/1/2000 01:03'!printPetalContentsOn: aDlPetalWriteStream	aDlPetalWriteStream crKey: 'version' value: self version.	aDlPetalWriteStream crKey: '_written' value: self written.	aDlPetalWriteStream crKey: 'charSet' value: self charSet.		 ! !!DlPetalHeader methodsFor: 'printing-petal' stamp: 'MU 10/1/2000 01:03'!printPetalFooterOn: aDlPetalWriteStream	super printPetalFooterOn: aDlPetalWriteStream.	aDlPetalWriteStream cr! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlPetalHeader class	instanceVariableNames: ''!!DlPetalHeader class methodsFor: 'constants' stamp: 'M.U 5/17/1999 00:33'!elementName	^'Petal'! !DlPetalObject subclass: #DlPetalOperation	instanceVariableNames: 'result parameters protocol concurrency opExportControl uid'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-ptl-element'!!DlPetalOperation commentStamp: '<historical>' prior: 0!I represent a Petal Operation element.#creator[:masashi | ^umezawa] #version 0.1!!DlPetalOperation methodsFor: 'actions' stamp: 'MU 8/27/2000 01:18'!addParameter: aDlPetalParameter	aDlPetalParameter container: self.	self parameters add: aDlPetalParameter	! !!DlPetalOperation methodsFor: 'actions' stamp: 'MU 9/17/2000 23:55'!beStatic	(self attributes includes: DlPetalAttribute classOperationAttribute)		ifFalse: [self attributes add: DlPetalAttribute classOperationAttribute]! !!DlPetalOperation methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:17'!concurrency	concurrency isNil ifTrue:[concurrency := 'Sequential'].	^concurrency! !!DlPetalOperation methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:11'!concurrency: aValue	concurrency := aValue! !!DlPetalOperation methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:18'!opExportControl	opExportControl isNil ifTrue:[opExportControl := 'Public'].	^opExportControl! !!DlPetalOperation methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:11'!opExportControl: aValue	opExportControl := aValue! !!DlPetalOperation methodsFor: 'accessing' stamp: 'MU 8/27/2000 00:10'!parameters	parameters isNil ifTrue:[ parameters := OrderedCollection new.].	^parameters! !!DlPetalOperation methodsFor: 'accessing' stamp: 'MU 8/27/2000 00:10'!parameters: aValue	parameters := aValue! !!DlPetalOperation methodsFor: 'accessing' stamp: 'MU 8/27/2000 00:10'!protocol	protocol isNil ifTrue:[ protocol := ''.].	^protocol! !!DlPetalOperation methodsFor: 'accessing' stamp: 'MU 8/27/2000 00:10'!protocol: aValue	protocol := aValue! !!DlPetalOperation methodsFor: 'accessing' stamp: 'MU 10/1/2000 23:55'!result	result isNil ifTrue:[result := ''].	^result! !!DlPetalOperation methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:11'!result: aValue	result := aValue! !!DlPetalOperation methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:19'!uid	uid isNil ifTrue:[uid := 0].	^uid! !!DlPetalOperation methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:11'!uid: aValue	uid := aValue! !!DlPetalOperation methodsFor: 'printing-petal' stamp: 'MU 9/3/2000 00:40'!printPetalContentsOn: aDlPetalWriteStream	super printPetalContentsOn: aDlPetalWriteStream.	aDlPetalWriteStream crKey: 'result' value: self result.	aDlPetalWriteStream crKey: 'parameters' type: 'Parameters' list: self parameters.	aDlPetalWriteStream crKey: 'protocol' value: self protocol.	aDlPetalWriteStream crKey: 'concurrency' value: self concurrency.	aDlPetalWriteStream crKey: 'opExportControl' value: self opExportControl.	aDlPetalWriteStream crKey: 'uid' value: self uid.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlPetalOperation class	instanceVariableNames: ''!!DlPetalOperation class methodsFor: 'instance creation' stamp: 'MU 9/18/2000 00:07'!named: aName protocol: aProtocol	^self named: aName result: nil parameters: #() protocol: aProtocol! !!DlPetalOperation class methodsFor: 'instance creation' stamp: 'MU 9/18/2000 00:03'!named: aName result: aResult parameters: aParameters protocol: aProtocol	| inst |	inst := self named: aName.	inst result: aResult..	aParameters do: [:each | inst addParameter: each].	inst protocol: aProtocol.	^inst! !!DlPetalOperation class methodsFor: 'constants' stamp: 'MU 9/12/2000 13:03'!elementName	^'Operation'! !DlPetalObject subclass: #DlPetalParameter	instanceVariableNames: 'type initv'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-ptl-element'!!DlPetalParameter commentStamp: '<historical>' prior: 0!I represent a Petal Parameter element. (method argument)#creator[:masashi | ^umezawa] #version 0.1!!DlPetalParameter methodsFor: 'accessing' stamp: 'MU 8/27/2000 00:15'!initv	initv isNil ifTrue:[ initv := ''.].	^initv! !!DlPetalParameter methodsFor: 'accessing' stamp: 'MU 8/27/2000 00:15'!initv: aValue	initv := aValue! !!DlPetalParameter methodsFor: 'accessing' stamp: 'MU 8/27/2000 00:16'!type	type isNil ifTrue:[ type := ''.].	^type! !!DlPetalParameter methodsFor: 'accessing' stamp: 'MU 8/27/2000 00:15'!type: aValue	type := aValue! !!DlPetalParameter methodsFor: 'printing-petal' stamp: 'MU 9/3/2000 00:40'!printPetalContentsOn: aDlPetalWriteStream	aDlPetalWriteStream crKey: 'type' value: self type.	aDlPetalWriteStream crKey: 'initv' value: self initv.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlPetalParameter class	instanceVariableNames: ''!!DlPetalParameter class methodsFor: 'instance creation' stamp: 'MU 9/12/2000 12:56'!named: aName type: aType	^self named: aName type: aType initv: 'nil'! !!DlPetalParameter class methodsFor: 'instance creation' stamp: 'MU 9/12/2000 12:57'!named: aName type: aType initv: anInitValue	| inst |	inst := self named: aName.	inst type: aType.	inst initv: anInitValue.	^inst ! !!DlPetalParameter class methodsFor: 'constants' stamp: 'MU 9/12/2000 12:59'!elementName	^'Parameter'! !DlPetalElement subclass: #DlPetalPrimitiveValue	instanceVariableNames: 'value'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-ptl-element'!!DlPetalPrimitiveValue commentStamp: '<historical>' prior: 0!I represent a Petal value-like element. (Primitive value)#creator[:masashi | ^umezawa] #version 0.1!!DlPetalPrimitiveValue methodsFor: 'printing' stamp: 'MU 9/3/2000 01:16'!printPetalOn: aDlPetalWriteStream indent: level 	aDlPetalWriteStream paren.	aDlPetalWriteStream commentPutAll: self name.	aDlPetalWriteStream space.	aDlPetalWriteStream value: self value.	aDlPetalWriteStream parenEnd! !!DlPetalPrimitiveValue methodsFor: 'accessing' stamp: 'MU 9/3/2000 01:10'!value	^value! !!DlPetalPrimitiveValue methodsFor: 'accessing' stamp: 'MU 9/3/2000 01:09'!value: aValue	value := aValue! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlPetalPrimitiveValue class	instanceVariableNames: ''!!DlPetalPrimitiveValue class methodsFor: 'instance creation' stamp: 'MU 9/3/2000 01:10'!name: aName value: aValue	| inst |	inst := self named: aName.	inst value: aValue.	^inst! !!DlPetalPrimitiveValue class methodsFor: 'utility' stamp: 'MU 9/12/2000 12:27'!classOperationValue	"magic number 203 - oh poor Rose!!"	^self name: 'operType' value: 203.! !DlPetalObject subclass: #DlPetalRelationship	instanceVariableNames: 'supplierClass supplier quidu'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-ptl-element'!!DlPetalRelationship commentStamp: '<historical>' prior: 0!I represent a Petal Relationship element (class to class relation)#creator[:masashi | ^umezawa] #version 0.1.!!DlPetalRelationship methodsFor: 'accessing-PetalElement' stamp: 'MU 10/1/2000 00:46'!supplierClass	^supplierClass! !!DlPetalRelationship methodsFor: 'accessing-PetalElement' stamp: 'MU 10/1/2000 00:46'!supplierClass: aValue	supplierClass := aValue! !!DlPetalRelationship methodsFor: 'accessing' stamp: 'MU 10/1/2000 00:46'!quidu	quidu isNil ifTrue:[ quidu := self supplierClass quid.].	^quidu! !!DlPetalRelationship methodsFor: 'accessing' stamp: 'MU 8/25/2000 01:47'!quidu: aValue	quidu := aValue! !!DlPetalRelationship methodsFor: 'accessing' stamp: 'MU 10/1/2000 00:46'!supplier	supplier isNil ifTrue:[ supplier := self supplierClass fullName.].	^supplier! !!DlPetalRelationship methodsFor: 'accessing' stamp: 'MU 8/25/2000 01:47'!supplier: aValue	supplier := aValue! !!DlPetalRelationship methodsFor: 'printing-petal' stamp: 'MU 10/7/2000 01:11'!printPetalContentsOn: aDlPetalWriteStream	super printPetalContentsOn: aDlPetalWriteStream.	aDlPetalWriteStream crKey: 'supplier' value: self supplier.	aDlPetalWriteStream crKey: 'quidu' value: self quidu.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlPetalRelationship class	instanceVariableNames: ''!!DlPetalRelationship class methodsFor: 'instance creation' stamp: 'MU 10/1/2000 00:47'!to: aDlPetalClass	^(self named: '') supplierClass: aDlPetalClass! !DlPetalRelationship subclass: #DlPetalInheritanceRelationship	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-ptl-element'!!DlPetalInheritanceRelationship commentStamp: '<historical>' prior: 0!I represent a Petal InheritanceRelationship element.#creator[:masashi | ^umezawa] #version 0.1!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlPetalInheritanceRelationship class	instanceVariableNames: ''!!DlPetalInheritanceRelationship class methodsFor: 'constants' stamp: 'MU 10/1/2000 00:40'!elementName	^'Inheritance_Relationship'! !DlPetalRelationship subclass: #DlPetalRealizeRelationship	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-ptl-element'!!DlPetalRealizeRelationship commentStamp: '<historical>' prior: 0!I represent a Petal RealizeRelationship element (interface realization)#creator[:masashi | ^umezawa] #version 0.1!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlPetalRealizeRelationship class	instanceVariableNames: ''!!DlPetalRealizeRelationship class methodsFor: 'constants' stamp: 'MU 10/6/2000 23:11'!elementName	^'Realize_Relationship'! !DlPetalObject subclass: #DlPetalRole	instanceVariableNames: 'klass supplier clientCardinality quidu isNavigable isAggregate'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-ptl-element'!!DlPetalRole commentStamp: '<historical>' prior: 0!I represent a Petal Role element.#creator[:masashi | ^umezawa] #version 0.1.!!DlPetalRole methodsFor: 'accessing-PetalElement' stamp: 'MU 8/25/2000 01:22'!klass	^klass! !!DlPetalRole methodsFor: 'accessing-PetalElement' stamp: 'MU 8/25/2000 01:22'!klass: aValue	klass := aValue! !!DlPetalRole methodsFor: 'actions' stamp: 'MU 10/9/2000 11:53'!label	^ ('$UNNAMED$*' match: self name)		ifTrue: ['']		ifFalse: [self name]! !!DlPetalRole methodsFor: 'actions' stamp: 'MU 9/18/2000 01:08'!label: aValue		self name: aValue! !!DlPetalRole methodsFor: 'actions' stamp: 'MU 8/25/2000 01:35'!name	name isNil ifTrue: [name := self defaultUnnamedCounter nextUnnamedString].	^ name! !!DlPetalRole methodsFor: 'accessing' stamp: 'MU 9/18/2000 01:27'!clientCardinality	clientCardinality isNil ifTrue:[ clientCardinality := ''.].	^clientCardinality! !!DlPetalRole methodsFor: 'accessing' stamp: 'MU 9/18/2000 01:27'!clientCardinality: aValue	clientCardinality := aValue! !!DlPetalRole methodsFor: 'accessing' stamp: 'MU 9/18/2000 01:27'!isAggregate	isAggregate isNil ifTrue:[ isAggregate := ''.].	^isAggregate! !!DlPetalRole methodsFor: 'accessing' stamp: 'MU 9/18/2000 01:28'!isAggregate: aValue	isAggregate := aValue! !!DlPetalRole methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:58'!isNavigable	isNavigable isNil ifTrue:[ isNavigable := true.].	^isNavigable! !!DlPetalRole methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:56'!isNavigable: aValue	isNavigable := aValue! !!DlPetalRole methodsFor: 'accessing' stamp: 'MU 8/25/2000 01:22'!quidu	quidu isNil ifTrue:[ quidu := self klass quid.].	^quidu! !!DlPetalRole methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:56'!quidu: aValue	quidu := aValue! !!DlPetalRole methodsFor: 'accessing' stamp: 'MU 8/25/2000 01:22'!supplier	supplier isNil ifTrue:[ supplier := self klass fullName.].	^supplier! !!DlPetalRole methodsFor: 'accessing' stamp: 'MU 8/20/2000 23:56'!supplier: aValue	supplier := aValue! !!DlPetalRole methodsFor: 'printing-petal' stamp: 'MU 9/18/2000 01:29'!printPetalContentsOn: aDlPetalWriteStream	super printPetalContentsOn: aDlPetalWriteStream.	aDlPetalWriteStream crKey: 'label' value: self label.	aDlPetalWriteStream crKey: 'supplier' value: self supplier.	aDlPetalWriteStream crKey: 'quidu' value: self quidu.	aDlPetalWriteStream crKey: 'client_cardinality' value: self clientCardinality.	aDlPetalWriteStream crKey: 'is_navigable' value: self isNavigable.	aDlPetalWriteStream crKey: 'is_aggregate' value: self isAggregate.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlPetalRole class	instanceVariableNames: ''!!DlPetalRole class methodsFor: 'instance creation' stamp: 'MU 9/18/2000 01:22'!named: aName on: aDlPetalClass 	^ (self named: aName)		klass: aDlPetalClass! !!DlPetalRole class methodsFor: 'instance creation' stamp: 'MU 9/18/2000 01:22'!on: aDlPetalClass 	^ self named: nil on: aDlPetalClass! !!DlPetalRole class methodsFor: 'constants' stamp: 'MU 9/18/2000 01:53'!elementName	^'Role'! !DlPetalElement subclass: #DlPetalValue	instanceVariableNames: 'value'	classVariableNames: ''	poolDictionaries: ''	category: 'Dandelion-ptl-element'!!DlPetalValue commentStamp: '<historical>' prior: 0!I represent a Petal Value element. (Typically used in Attribute complex value content)#creator[:masashi | ^umezawa] #version 0.1.!!DlPetalValue methodsFor: 'accessing' stamp: 'MU 9/3/2000 00:22'!value	value isNil ifTrue:[ value := 'so7'.].	^value! !!DlPetalValue methodsFor: 'accessing' stamp: 'MU 9/3/2000 00:18'!value: aValue	value := aValue! !!DlPetalValue methodsFor: 'printing' stamp: 'MU 9/3/2000 01:07'!printPetalHeaderOn: aDlPetalWriteStream 	aDlPetalWriteStream paren.	aDlPetalWriteStream nextPutAll: self class elementKind.	! !!DlPetalValue methodsFor: 'printing-petal' stamp: 'MU 9/3/2000 01:17'!printPetalContentsOn: aDlPetalWriteStream 	aDlPetalWriteStream key: self name value: self value! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DlPetalValue class	instanceVariableNames: ''!!DlPetalValue class methodsFor: 'instance creation' stamp: 'MU 9/3/2000 00:59'!name: aName value: aValue	| inst |	inst := self named: aName.	inst value: aValue.	^inst! !!DlPetalValue class methodsFor: 'constants' stamp: 'MU 9/3/2000 00:33'!elementKind	^'value'! !DlPetalClassCategory initialize!